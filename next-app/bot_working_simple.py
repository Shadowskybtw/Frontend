#!/usr/bin/env python3
"""
Working simple bot as it was before
"""

import logging
import requests
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# Configuration
BOT_TOKEN = "7829386579:AAGAUFZdd6PbuDtdEI1zxAkfY1vlj0Mu0WE"
WEBAPP_URL = "https://next-5th7g9hii-shadowskys-projects.vercel.app"

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user = update.effective_user
    logger.info(f"START command from user {user.id}")
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DUNGEON, {user.first_name}!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ü–∏–π
‚Ä¢ üéØ –ü–æ–ª—É—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã  
‚Ä¢ üíé –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    user = update.effective_user
    logger.info(f"HELP command from user {user.id}")
    
    help_text = """ü§ñ <b>DUNGEON Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –û—Ç–∫—Ä—ã—Ç—å WebApp
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/stocks - –í–∞—à–∏ –∞–∫—Ü–∏–∏
/hookahs - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã

<b>WebApp —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª—å—è–Ω–∞–º–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /register command"""
    user = update.effective_user
    logger.info(f"REGISTER command from user {user.id}")
    
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def stocks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /stocks command"""
    user = update.effective_user
    logger.info(f"STOCKS command from user {user.id}")
    
    # Try to get user stocks from API
    try:
        response = requests.get(
            f"{WEBAPP_URL}/api/stocks/{user.id}",
            headers={'x-telegram-init-data': 'test'}  # Placeholder
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success') and data.get('stocks'):
                stocks_text = "üìä <b>–í–∞—à–∏ –∞–∫—Ü–∏–∏:</b>\n\n"
                for stock in data['stocks']:
                    progress_bar = "‚ñà" * (stock['progress'] // 10) + "‚ñë" * (10 - stock['progress'] // 10)
                    stocks_text += f"‚Ä¢ {stock['stock_name']}: {stock['progress']}%\n{progress_bar}\n\n"
            else:
                stocks_text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ü–∏–π. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
        else:
            stocks_text = "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ü–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
            
    except Exception as e:
        logger.error(f"Error fetching stocks: {e}")
        stocks_text = "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ü–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
    
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –∞–∫—Ü–∏–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        stocks_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def hookahs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /hookahs command"""
    user = update.effective_user
    logger.info(f"HOOKAHS command from user {user.id}")
    
    # Try to get user hookahs from API
    try:
        response = requests.get(
            f"{WEBAPP_URL}/api/free-hookahs/{user.id}",
            headers={'x-telegram-init-data': 'test'}  # Placeholder
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                hookahs_text = f"üéØ <b>–í–∞—à–∏ –∫–∞–ª—å—è–Ω—ã:</b>\n\n"
                hookahs_text += f"‚Ä¢ –í—Å–µ–≥–æ: {data.get('totalCount', 0)}\n"
                hookahs_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {data.get('unusedCount', 0)}\n"
                hookahs_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {data.get('totalCount', 0) - data.get('unusedCount', 0)}\n"
            else:
                hookahs_text = "üéØ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª—å—è–Ω–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
        else:
            hookahs_text = "üéØ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª—å—è–Ω–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
            
    except Exception as e:
        logger.error(f"Error fetching hookahs: {e}")
        hookahs_text = "üéØ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª—å—è–Ω–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
    
    keyboard = [
        [InlineKeyboardButton("üéØ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å—è–Ω—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        hookahs_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle regular messages"""
    user = update.effective_user
    text = update.message.text
    logger.info(f"MESSAGE from user {user.id}: {text}")
    
    await update.message.reply_text(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """Main function"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("register", register_command))
    application.add_handler(CommandHandler("stocks", stocks_command))
    application.add_handler(CommandHandler("hookahs", hookahs_command))
    
    # Regular message handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    # Error handler
    application.add_error_handler(error_handler)
    
    logger.info("Starting working simple bot...")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
