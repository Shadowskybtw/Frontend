#!/usr/bin/env python3
"""
Ultra simple working bot with all features
"""

import logging
import asyncio
import requests
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

# Configuration
BOT_TOKEN = "7829386579:AAGAUFZdd6PbuDtdEI1zxAkfY1vlj0Mu0WE"
WEBAPP_URL = "https://next-5th7g9hii-shadowskys-projects.vercel.app"
ADMIN_ID = 937011437

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Global state
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"START from {user.id}")
    
    keyboard = []
    keyboard.append([InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))])
    
    if user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ (–ê–¥–º–∏–Ω)", callback_data="broadcast_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DUNGEON, {user.first_name}!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ü–∏–π
‚Ä¢ üéØ –ü–æ–ª—É—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã  
‚Ä¢ üíé –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"HELP from {user.id}")
    
    text = """ü§ñ <b>DUNGEON Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –û—Ç–∫—Ä—ã—Ç—å WebApp
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/stocks - –í–∞—à–∏ –∞–∫—Ü–∏–∏
/hookahs - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã"""
    
    if user.id == ADMIN_ID:
        text += "\n/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
    
    text += """

<b>WebApp —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª—å—è–Ω–∞–º–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"REGISTER from {update.effective_user.id}")
    
    keyboard = [[InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def stocks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"STOCKS from {update.effective_user.id}")
    
    text = "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ü–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
    keyboard = [[InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –∞–∫—Ü–∏–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def hookahs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"HOOKAHS from {update.effective_user.id}")
    
    text = "üéØ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª—å—è–Ω–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ WebApp!"
    keyboard = [[InlineKeyboardButton("üéØ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å—è–Ω—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}/register"))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"BROADCAST from {user.id}")
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üòé")
        return
    
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    
    await send_broadcast(update, context, text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    logger.info(f"BUTTON from {user.id}: {query.data}")
    
    if query.data == "broadcast_menu":
        if user.id != ADMIN_ID:
            await query.edit_message_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üòé")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="broadcast_text")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("üì¢ <b>–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif query.data == "broadcast_text":
        if user.id != ADMIN_ID:
            await query.edit_message_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üòé")
            return
        
        user_states[user.id] = 'waiting_for_broadcast_text'
        
        await query.edit_message_text("üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode=ParseMode.HTML)
    
    elif query.data == "cancel":
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    logger.info(f"MESSAGE from {user.id}: {text}")
    
    if user_states.get(user.id) == 'waiting_for_broadcast_text' and user.id == ADMIN_ID:
        user_states[user.id] = None
        await send_broadcast(update, context, text)
        return
    
    await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")

async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        response = requests.post(
            f"{WEBAPP_URL}/api/broadcast",
            headers={'Content-Type': 'application/json'},
            json={'action': 'get_users', 'admin_key': 'admin123'}
        )
        
        if response.status_code != 200:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        data = response.json()
        if not data.get('success'):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: " + data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            return
        
        users = data.get('users', [])
        if not users:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        await update.message.reply_text(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        count = 0
        failed = 0
        
        for user_data in users:
            try:
                tg_id = user_data.get('tg_id')
                if not tg_id or tg_id == 0:
                    continue
                    
                await context.bot.send_message(chat_id=tg_id, text=text)
                count += 1
                await asyncio.sleep(0.2)
                
            except Exception as e:
                failed += 1
                logger.error(f"Failed to send message to {tg_id}: {e}")
                continue
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )
        
    except Exception as e:
        logger.error(f"Broadcast error: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("stocks", stocks))
    app.add_handler(CommandHandler("hookahs", hookahs))
    app.add_handler(CommandHandler("broadcast", broadcast))
    
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("Starting ultra simple bot...")
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
