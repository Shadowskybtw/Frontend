"use client"
import React, { useEffect, useRef, useState, useCallback } from 'react'
import QrScanner from 'qr-scanner'

interface QRScannerProps {
  onScan: (result: string) => void
  onClose: () => void
}

export default function QRScanner({ onScan, onClose }: QRScannerProps) {
  const videoRef = useRef<HTMLVideoElement>(null)
  const qrScannerRef = useRef<QrScanner | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)
  const [userStarted, setUserStarted] = useState(false) // –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è user gesture
  const mountedRef = useRef(true)

  const handleScan = useCallback((result: QrScanner.ScanResult) => {
    console.log('QR Code detected:', result.data)
    console.log('Scanner state - mounted:', mountedRef.current, 'isScanning:', isScanning)
    
    if (mountedRef.current && isScanning) {
      console.log('QR Code scanned successfully:', result.data)
      onScan(result.data)
    } else {
      console.log('QR Code detected but scanner not ready')
    }
  }, [onScan, isScanning])

  // Helper: –ø—Ä–æ—Å—Ç–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–æ–ø —Å–∫–∞–Ω–µ—Ä–∞
  const safeStop = useCallback(async () => {
    try {
      if (qrScannerRef.current) {
        await qrScannerRef.current.stop()
        qrScannerRef.current.destroy()
        qrScannerRef.current = null
      }
    } catch (e) {
      console.warn('safeStop failed', e)
    }
    setIsScanning(false)
    setIsInitialized(false)
  }, [])



  // Start/stop button for mobile - user gesture
  const handleUserStart = async () => {
    if (isScanning || isInitialized) {
      console.log('Scanner already running, ignoring start request')
      return
    }
    
    console.log('User started scanner')
    setUserStarted(true)
    setError(null)
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–µ—Ä—É
      const hasCamera = await QrScanner.hasCamera()
      if (!hasCamera) {
        setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.')
        return
      }

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫–∞–Ω–µ—Ä
      await safeStop()

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 100))

      // –°–æ–∑–¥–∞–µ–º QrScanner —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      if (videoRef.current) {
        qrScannerRef.current = new QrScanner(
          videoRef.current,
          handleScan,
          {
            maxScansPerSecond: 5,
            highlightScanRegion: true,
            highlightCodeOutline: true,
            preferredCamera: 'environment'
          }
        )

        console.log('Starting QrScanner...')
        try {
          await qrScannerRef.current.start()
          console.log('QrScanner.start() completed')
        } catch (startError) {
          console.error('QrScanner start error:', startError)
          setError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ QR –∫–æ–¥–æ–≤')
          throw startError
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        if (videoRef.current) {
          const video = videoRef.current as HTMLVideoElement
          video.style.display = 'block'
          video.style.visibility = 'visible'
          video.style.opacity = '1'
          video.style.width = '100%'
          video.style.height = '256px'
          video.style.objectFit = 'cover'
          video.style.backgroundColor = 'transparent'
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setIsScanning(true)
      setIsInitialized(true)
      setError(null)
      console.log('Scanner started successfully')
      
    } catch (error) {
      console.error('Error starting camera:', error)
      const em = error instanceof Error ? error.message : String(error)
      
      if (em.includes('NotAllowedError') || em.includes('permission')) {
        setError('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ Telegram.')
      } else if (em.includes('NotReadableError')) {
        setError('–ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É.')
      } else if (em.includes('NotFoundError')) {
        setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–º–µ—Ä–∞.')
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ QR –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.')
      }
      
      setIsScanning(false)
      setIsInitialized(false)
    }
  }

  useEffect(() => {
    mountedRef.current = true
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const autoStart = async () => {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 500))
      if (mountedRef.current && !isScanning && !isInitialized) {
        console.log('Auto-starting camera...')
        try {
          await handleUserStart()
        } catch (error) {
          console.error('Auto-start failed:', error)
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.')
        }
      }
    }
    
    autoStart()

    return () => {
      mountedRef.current = false
      safeStop()
    }
  }, [safeStop, handleUserStart, isScanning, isInitialized])

  const handleClose = async () => {
    mountedRef.current = false
    await safeStop()
    onClose()
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞</h3>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-700 text-2xl"
          >
            √ó
          </button>
        </div>

        <div className="relative">
              <video
                ref={videoRef}
                className="w-full h-64 bg-gray-200 rounded-lg object-cover"
                playsInline
                autoPlay
                muted
                style={{ 
                  display: isInitialized ? 'block' : 'none',
                  visibility: isInitialized ? 'visible' : 'hidden',
                  opacity: isInitialized ? '1' : '0',
                  width: '100%',
                  height: '256px',
                  objectFit: 'cover'
                }}
              />
              {!isInitialized && !error && (
                <div className="w-full h-64 bg-gray-200 rounded-lg flex items-center justify-center">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
                    <p className="text-gray-600 text-sm">–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã...</p>
                    <p className="text-gray-500 text-xs mt-1">–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ</p>
                  </div>
                </div>
              )}
            </div>

        {error && (
          <div className="mt-4 p-3 bg-red-100 border border-red-300 rounded-lg">
            <p className="text-red-800 text-sm">{error}</p>
            <button
              onClick={handleUserStart}
              className="mt-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm"
            >
              üì∑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}

            <div className="mt-4 text-center">
              <p className="text-gray-600 text-sm">
                {isScanning 
                  ? '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR –∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' 
                  : '–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã...'
                }
              </p>
              {isScanning && (
                <div className="mt-2 flex items-center justify-center space-x-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-green-600 text-xs">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤...</span>
                </div>
              )}
              
              {isScanning && (
                <div className="mt-2 text-center">
                  <div className="inline-block px-3 py-1 bg-green-100 text-green-800 text-xs rounded-full animate-pulse">
                    –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR –∫–æ–¥
                  </div>
                </div>
              )}
              
            </div>

            <div className="mt-4 flex justify-center">
              <button
                onClick={handleClose}
                className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
      </div>
    </div>
  )
}
