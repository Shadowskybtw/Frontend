"use client"
import React, { useEffect, useRef, useState, useCallback } from 'react'
import QrScanner from 'qr-scanner'

interface QRScannerProps {
  onScan: (result: string) => void
  onClose: () => void
  onManualInput?: () => void
}

export default function QRScanner({ onScan, onClose, onManualInput }: QRScannerProps) {
  const videoRef = useRef<HTMLVideoElement>(null)
  const qrScannerRef = useRef<QrScanner | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)
  const [userStarted, setUserStarted] = useState(false) // –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è user gesture
  const mountedRef = useRef(true)

  const handleScan = useCallback((result: QrScanner.ScanResult) => {
    if (mountedRef.current && isScanning) {
      console.log('QR Code scanned:', result.data)
      onScan(result.data)
    }
  }, [onScan, isScanning])

  // Helper: –ø—Ä–æ—Å—Ç–æ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ç–æ–ø —Å–∫–∞–Ω–µ—Ä–∞
  const safeStop = useCallback(async () => {
    try {
      if (qrScannerRef.current) {
        await qrScannerRef.current.stop()
        qrScannerRef.current.destroy()
        qrScannerRef.current = null
      }
    } catch (e) {
      console.warn('safeStop failed', e)
    }
    setIsScanning(false)
    setIsInitialized(false)
  }, [])

  const initScanner = useCallback(async () => {
    if (!videoRef.current || !mountedRef.current) return

    try {
      setError(null)
      setIsInitialized(false)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram WebApp
      const isTelegramWebApp = typeof window !== 'undefined' && (window as any).Telegram?.WebApp
      if (isTelegramWebApp) {
        console.log('Running in Telegram WebApp - camera access may be limited')
      }

      // –°—Ç–∞–≤–∏–º playsinline –µ—â—ë —Ä–∞–∑ –Ω–∞ —Å–ª—É—á–∞–π iOS webview
      try {
        if (videoRef.current) {
          videoRef.current.setAttribute('playsinline', 'true')
        }
      } catch (e) {
        console.warn('Failed to set playsinline', e)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–µ—Ä—É
      const hasCamera = await QrScanner.hasCamera()
      if (!hasCamera) {
        setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.')
        return
      }

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫–∞–Ω–µ—Ä
      await safeStop()

      // –ü–æ–ø—ã—Ç–∫–∞ 1: QrScanner —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      try {
        qrScannerRef.current = new QrScanner(
          videoRef.current,
          handleScan,
          {
            maxScansPerSecond: 1,
            highlightScanRegion: false,
            highlightCodeOutline: false,
            // —É–±—Ä–∞–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π preferredCamera, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞–ª—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
          }
        )

        await qrScannerRef.current.start()
        setIsScanning(true)
        setIsInitialized(true)
        setError(null)
        return

      } catch (err) {
        console.warn('QrScanner.start() failed, trying fallback getUserMedia', err)
        
        // fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é getUserMedia –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å stream –≤ video
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: { facingMode: 'environment' }
          })
          
          videoRef.current.srcObject = stream
          await videoRef.current.play()
          
          // —Å–æ–∑–¥–∞—ë–º QrScanner –ø–æ–≤–µ—Ä—Ö —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (QrScanner –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π video —ç–ª–µ–º–µ–Ω—Ç)
          qrScannerRef.current = new QrScanner(
            videoRef.current,
            handleScan,
            {
              maxScansPerSecond: 1,
              highlightScanRegion: false,
            }
          )
          
          await qrScannerRef.current.start()
          setIsScanning(true)
          setIsInitialized(true)
          setError(null)
          return

        } catch (err2) {
          console.error('Fallback getUserMedia failed', err2)
          
          // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏ –¥–∞—ë–º –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
          const em = err2 instanceof Error ? err2.message : String(err2)
          if (em.includes('NotAllowedError') || em.includes('permission')) {
            setError('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram / –±—Ä–∞—É–∑–µ—Ä–∞.')
          } else if (em.includes('NotReadableError')) {
            setError('–ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É.')
          } else {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.')
          }
          setIsScanning(false)
          setIsInitialized(false)
        }
      }

    } catch (err) {
      console.error('Scanner initialization error:', err)
      setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã.')
      setIsScanning(false)
      setIsInitialized(false)
    }
  }, [handleScan, safeStop])

  const restartScanner = useCallback(async () => {
    await safeStop()
    await initScanner()
  }, [initScanner, safeStop])

  // Start/stop button for mobile - user gesture
  const handleUserStart = async () => {
    setUserStarted(true)
    setError(null)
    await initScanner()
  }

  // –í–ê–ñ–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ visibilitychange - —Å—Ç–æ–ø/—Å—Ç–∞—Ä—Ç –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏/–ø–æ—è–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    const onVis = async () => {
      if (document.hidden) {
        // –∫–æ–≥–¥–∞ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä, —á—Ç–æ–±—ã WebView –Ω–µ —Å–±—Ä–æ—Å–∏–ª –ø–æ—Ç–æ–∫
        await safeStop()
      } else {
        // –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if (userStarted) {
          await initScanner()
        }
      }
    }
    
    document.addEventListener('visibilitychange', onVis)
    return () => document.removeEventListener('visibilitychange', onVis)
  }, [initScanner, safeStop, userStarted])

  useEffect(() => {
    mountedRef.current = true
    // –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ userStarted (—Å–º. –Ω–∏–∂–µ)
    if (userStarted) initScanner()

    return () => {
      mountedRef.current = false
      safeStop()
    }
  }, [initScanner, safeStop, userStarted])

  const handleClose = async () => {
    mountedRef.current = false
    await safeStop()
    onClose()
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞</h3>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-700 text-2xl"
          >
            √ó
          </button>
        </div>

            <div className="relative">
              <video
                ref={videoRef}
                className="w-full h-64 bg-gray-200 rounded-lg object-cover"
                playsInline
                autoPlay
                muted
                style={{ display: isInitialized ? 'block' : 'none' }}
              />
              {!isInitialized && !error && (
                <div className="w-full h-64 bg-gray-200 rounded-lg flex items-center justify-center">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
                    <p className="text-gray-600 text-sm">–ö–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞</p>
                    <button
                      onClick={handleUserStart}
                      className="mt-3 bg-blue-500 text-white px-4 py-2 rounded"
                    >
                      –ó–∞–ø—É—Å—Ç–∏—Ç—å
                    </button>
                  </div>
                </div>
              )}
            </div>

        {error && (
          <div className="mt-4 p-3 bg-red-100 border border-red-300 rounded-lg">
            <p className="text-red-800 text-sm mb-2">{error}</p>
            <button
              onClick={restartScanner}
              className="text-red-600 hover:text-red-800 text-sm underline"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}

        <div className="mt-4 text-center">
          <p className="text-gray-600 text-sm">
            {isScanning 
              ? '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR –∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' 
              : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã...'
            }
          </p>
          {isScanning && (
            <div className="mt-2 flex items-center justify-center space-x-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-green-600 text-xs">–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞</span>
            </div>
          )}
        </div>

            <div className="mt-4 flex justify-center space-x-2">
              <button
                onClick={restartScanner}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm"
              >
                üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
              </button>
              {onManualInput && (
                <button
                  onClick={onManualInput}
                  className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm"
                >
                  ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
                </button>
              )}
              <button
                onClick={handleClose}
                className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
      </div>
    </div>
  )
}
