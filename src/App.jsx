import React, { useContext, useEffect, useState } from 'react'
import { Routes, Route, Navigate } from 'react-router-dom'
import { UserProvider, UserContext } from './context/UserContext'
import { userAPI } from './utils/api'

import Navbar from './components/Navbar'
import Profile from './pages/Profile'
import Promo from './pages/Promo'
import NotFound from './pages/NotFound'
import Register from './pages/Register'
import ErrorBoundary from './components/ErrorBoundary'
import Loading from './components/Loading'
import InitError from './components/InitError'

function AppRoutes() {
  const { user, setUser, telegramUser } = useContext(UserContext)
  const [checking, setChecking] = useState(true)
  const [initError, setInitError] = useState(null)

  // When Telegram user appears, check if they are registered in backend
  useEffect(() => {
    let canceled = false

    async function check() {
              try {
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
          console.log('üîç Checking Telegram WebApp availability...')
          console.log('window.Telegram:', window.Telegram)
          console.log('window.Telegram?.WebApp:', window.Telegram?.WebApp)
          
          if (window.Telegram?.WebApp) {
            console.log('‚úÖ Telegram WebApp found, initializing...')
            try {
              window.Telegram.WebApp.ready()
              console.log('‚úÖ WebApp.ready() called')
            } catch (readyError) {
              console.warn('‚ö†Ô∏è WebApp.ready() failed:', readyError)
            }
            
            try {
              window.Telegram.WebApp.expand()
              console.log('‚úÖ WebApp.expand() called')
            } catch (expandError) {
              console.warn('‚ö†Ô∏è WebApp.expand() failed:', expandError)
            }
            
            console.log('WebApp initDataUnsafe:', window.Telegram.WebApp.initDataUnsafe)
            console.log('WebApp user:', window.Telegram.WebApp.initDataUnsafe?.user)
          } else {
            console.warn('‚ö†Ô∏è Telegram WebApp not found - running outside Telegram')
          }

        // If we already have a stored user with phone, skip backend check
        if (user && user.phone && String(user.phone).trim().length > 0) {
          setChecking(false)
          return
        }

        // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('üîç Checking telegramUser:', telegramUser)
        console.log('telegramUser?.id:', telegramUser?.id)
        
        if (!telegramUser?.id) {
          console.log('‚ùå No Telegram user ID, showing registration')
          setChecking(false)
          return
        }
        
        console.log('‚úÖ Telegram user ID found:', telegramUser.id)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint
        console.log('üåê Calling new API endpoint:', `/api/webapp/init/${telegramUser.id}`)
        try {
          const response = await fetch(`/api/webapp/init/${telegramUser.id}`)
          console.log('üì° New API response status:', response.status)
          
          if (response.ok) {
            const data = await response.json()
            console.log('New API response data:', data)
            
            if (data.userExists && data.user) {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
              setUser({
                id: data.user.tg_id ?? data.user.id ?? telegramUser.id,
                name: data.user.firstName ?? data.user.name ?? '',
                surname: data.user.lastName ?? data.user.surname ?? '',
                phone: data.user.phone ?? '',
                username: data.user.username ?? telegramUser.username ?? ''
              })
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
              try { localStorage.setItem('user', JSON.stringify(data.user)) } catch {}
            } else {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
              setUser(null)
              try { localStorage.removeItem('user') } catch {}
            }
          } else if (response.status === 404) {
            // –ù–æ–≤—ã–π endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π API
            console.log('üîÑ New API returned 404, using fallback')
            console.log('üåê Calling fallback API:', `/api/main/${telegramUser.id}`)
            const data = await userAPI.checkUser(telegramUser.id)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç fallback API
            if (data && (data.userExists === false || !data.user)) {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
              setUser(null)
              try { localStorage.removeItem('user') } catch {}
            } else {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
              const payload = data?.user ?? data
              const phoneVal = payload?.phone
              const hasPhone =
                (typeof phoneVal === 'string' && phoneVal.trim().length > 0 && !['null','undefined'].includes(phoneVal.trim().toLowerCase())) ||
                (typeof phoneVal === 'number' && String(phoneVal).trim().length > 0)

              if (hasPhone) {
                setUser({
                  id: payload.tg_id ?? payload.id ?? telegramUser.id,
                  name: payload.firstName ?? payload.name ?? '',
                  surname: payload.lastName ?? payload.surname ?? '',
                  phone: payload.phone ?? '',
                  username: payload.username ?? telegramUser.username ?? ''
                })
              } else {
                setUser(null)
                try { localStorage.removeItem('user') } catch {}
              }
            }
          } else {
            // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            console.log('üîÑ New API error status:', response.status, 'using fallback')
            console.log('üåê Calling fallback API due to error')
            const data = await userAPI.checkUser(telegramUser.id)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç fallback API
            if (data && (data.userExists === false || !data.user)) {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
              setUser(null)
              try { localStorage.removeItem('user') } catch {}
            } else {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
              const payload = data?.user ?? data
              const phoneVal = payload?.phone
              const hasPhone =
                (typeof phoneVal === 'string' && phoneVal.trim().length > 0 && !['null','undefined'].includes(phoneVal.trim().toLowerCase())) ||
                (typeof phoneVal === 'number' && String(phoneVal).trim().length > 0)

              if (hasPhone) {
                setUser({
                  id: payload.tg_id ?? payload.id ?? telegramUser.id,
                  name: payload.firstName ?? payload.name ?? '',
                  surname: payload.lastName ?? payload.surname ?? '',
                  phone: payload.phone ?? '',
                  username: payload.username ?? telegramUser.username ?? ''
                })
              } else {
                setUser(null)
                try { localStorage.removeItem('user') } catch {}
              }
            }
          }
        } catch (apiError) {
          console.error('‚ùå New API error:', apiError)
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö
          try {
            console.log('üîÑ Using fallback API due to error')
            console.log('üåê Calling fallback API after error')
            const data = await userAPI.checkUser(telegramUser.id)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç fallback API
            if (data && (data.userExists === false || !data.user)) {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
              setUser(null)
              try { localStorage.removeItem('user') } catch {}
            } else {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
              const payload = data?.user ?? data
              const phoneVal = payload?.phone
              const hasPhone =
                (typeof phoneVal === 'string' && phoneVal.trim().length > 0 && !['null','undefined'].includes(phoneVal.trim().toLowerCase())) ||
                (typeof phoneVal === 'number' && String(phoneVal).trim().length > 0)

              if (hasPhone) {
                setUser({
                  id: payload.tg_id ?? payload.id ?? telegramUser.id,
                  name: payload.firstName ?? payload.name ?? '',
                  surname: payload.lastName ?? payload.surname ?? '',
                  phone: payload.phone ?? '',
                  username: payload.username ?? telegramUser.username ?? ''
                })
              } else {
                setUser(null)
                try { localStorage.removeItem('user') } catch {}
              }
            }
          } catch (fallbackError) {
            console.error('Fallback API also failed:', fallbackError)
            setInitError(fallbackError)
          }
        }
      } catch (e) {
        console.error('Main check error:', e)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π 404 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)
        if (e.message?.includes('404')) {
          console.log('User not found (404), showing registration')
          setUser(null)
          try { localStorage.removeItem('user') } catch {}
        } else {
          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
          console.error('Critical error during initialization:', e)
          setInitError(e)
        }
      } finally {
        if (!canceled) setChecking(false)
      }
    }

    check()
    return () => { canceled = true }
  }, [telegramUser?.id, user, setUser])

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (checking) return <Loading message="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp..." size="large" />

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (initError) {
    return (
      <InitError 
        error={initError} 
        onRetry={() => {
          setInitError(null)
          setChecking(true)
          // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
          setTimeout(() => {
            const check = async () => {
              try {
                if (telegramUser?.id) {
                  const response = await fetch(`/api/webapp/init/${telegramUser.id}`)
                  if (response.ok) {
                    const data = await response.json()
                    if (data.userExists && data.user) {
                      setUser({
                        id: data.user.tg_id ?? data.user.id ?? telegramUser.id,
                        name: data.user.firstName ?? data.user.name ?? '',
                        surname: data.user.lastName ?? data.user.surname ?? '',
                        phone: data.user.phone ?? '',
                        username: data.user.username ?? telegramUser.username ?? ''
                      })
                      try { localStorage.setItem('user', JSON.stringify(data.user)) } catch {}
                      setInitError(null)
                    }
                  }
                }
              } catch (e) {
                console.error('Retry failed:', e)
              } finally {
                setChecking(false)
              }
            }
            check()
          }, 100)
        }}
      />
    )
  }

  return (
    <>
      {user && <Navbar />}
      <Routes>
        {!user ? (
          <>
            <Route path="/register" element={<Register />} />
            <Route path="/" element={<Navigate to="/register" replace />} />
            <Route path="*" element={<Navigate to="/register" replace />} />
          </>
        ) : (
          <>
            <Route path="/profile" element={<Profile />} />
            <Route path="/promo" element={<Promo />} />
            <Route path="/" element={<Navigate to="/profile" replace />} />
            <Route path="*" element={<NotFound />} />
          </>
        )}
      </Routes>
    </>
  )
}

function App() {
  return (
    <ErrorBoundary>
      <UserProvider>
        <AppRoutes />
      </UserProvider>
    </ErrorBoundary>
  )
}

export default App
