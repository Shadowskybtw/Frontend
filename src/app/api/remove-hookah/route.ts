import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

// Ensure this mutation route is never cached or statically optimized
export const dynamic = 'force-dynamic'
export const revalidate = 0

export async function POST(request: NextRequest) {
  try {
    const { user_tg_id, admin_tg_id, hookah_type, count } = await request.json()

    if (!user_tg_id || !admin_tg_id) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
    const admin = await db.getUserByTgId(admin_tg_id)
    if (!admin) {
      return NextResponse.json(
        { success: false, message: '–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
    const adminTgId = parseInt(process.env.ADMIN_TG_ID || '937011437')
    const isHardcodedAdmin = Number(admin_tg_id) === adminTgId
    const isDbAdmin = await db.isUserAdmin(admin.id)
    const isAdmin = isHardcodedAdmin || isDbAdmin
    
    if (!isAdmin) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUserByTgId(user_tg_id)
    if (!user) {
      return NextResponse.json(
        { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    const type: 'regular' | 'free' = hookah_type === 'free' ? 'free' : 'regular'

    let newProgress: number | undefined
    const removeCount = Math.max(1, parseInt(String(count || '1')) || 1)

    console.log('üîç Processing remove request:', { user_tg_id, type, removeCount })

    if (type === 'regular') {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤
      const stocks = await db.getUserStocks(user.id)
      const stock = stocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω')
      
      if (!stock) {
        return NextResponse.json(
          { success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ü–∏–∏ 5+1' },
          { status: 400 }
        )
      }

      console.log('üìä Current stock:', stock)

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const currentHistory = await db.getHookahHistory(user.id)
      const regularHookahs = currentHistory.filter(h => h.hookah_type === 'regular')
      const freeHookahs = currentHistory.filter(h => h.hookah_type === 'free')
      
      console.log('üìú Current history state:', {
        total: currentHistory.length,
        regular: regularHookahs.length,
        free: freeHookahs.length,
        stockProgress: stock.progress,
        expectedFromProgress: Math.floor(stock.progress / 20)
      })

      // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ progress –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û
      const correctProgress = Math.min(100, regularHookahs.length * 20)
      
      if (stock.progress !== correctProgress) {
        console.log('‚ö†Ô∏è CRITICAL MISMATCH DETECTED!')
        console.log(`   Stock progress: ${stock.progress}%`)
        console.log(`   History count: ${regularHookahs.length} hookahs`)
        console.log(`   Expected progress: ${correctProgress}%`)
        console.log('üîß Auto-fixing...')
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º progress
        await db.updateStockProgress(stock.id, correctProgress)
        console.log(`‚úÖ Fixed! Progress updated from ${stock.progress}% to ${correctProgress}%`)
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç –∫–∞–ª—å—è–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if (regularHookahs.length === 0) {
          return NextResponse.json({
            success: false,
            message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ! –ü—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª ${stock.progress}%, –Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ 0 –∫–∞–ª—å—è–Ω–æ–≤. –î–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å: ${correctProgress}%`,
            debug: {
              oldProgress: stock.progress,
              newProgress: correctProgress,
              historyCount: regularHookahs.length,
              action: 'critical_mismatch_fixed'
            }
          }, { status: 400 })
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º stock –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        stock.progress = correctProgress
      }

      // –£–¥–∞–ª—è–µ–º N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö regular –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 20*N
      let removed = 0
      for (let i = 0; i < removeCount; i++) {
        const ok = await db.removeHookahFromHistory(user.id, 'regular')
        if (ok) {
          removed++
          console.log(`‚úÖ Removed hookah ${i + 1}/${removeCount}`)
        } else {
          console.log(`‚ö†Ô∏è No more hookahs to remove after ${removed}`)
          break
        }
      }

      if (removed === 0) {
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –ø–æ—á–µ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
        const detailedMessage = regularHookahs.length === 0
          ? `–í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ 'regular'. –ü—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω –¥–æ 0%. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ /api/diagnose-user?phone=6642 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`
          : `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ö–æ—Ç—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ ${regularHookahs.length} –∑–∞–ø–∏—Å–µ–π. –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.`
        
        return NextResponse.json({
          success: false,
          message: detailedMessage,
          debug: {
            totalHistory: currentHistory.length,
            regularCount: regularHookahs.length,
            freeCount: freeHookahs.length,
            stockProgress: stock.progress,
            diagnoseUrl: `/api/diagnose-user?phone=XXXX`
          }
        }, { status: 400 })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      const delta = removed * 20
      newProgress = Math.max(0, stock.progress - delta)
      await db.updateStockProgress(stock.id, newProgress)
      console.log(`üìâ Updated progress: ${stock.progress} -> ${newProgress} (removed ${removed} hookahs)`)
    } else {
      // –£–¥–∞–ª—è–µ–º N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤
      let removed = 0
      for (let i = 0; i < removeCount; i++) {
        const ok = await db.removeHookahFromHistory(user.id, 'free')
        if (ok) {
          removed++
          console.log(`‚úÖ Removed free hookah ${i + 1}/${removeCount}`)
        } else {
          console.log(`‚ö†Ô∏è No more free hookahs to remove after ${removed}`)
          break
        }
      }

      if (removed === 0) {
        return NextResponse.json(
          { success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' },
          { status: 400 }
        )
      }
    }

    const res = NextResponse.json({
      success: true,
      message: type === 'regular' ? '–ü–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name
      },
      newProgress
    })
    res.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate')
    res.headers.set('Pragma', 'no-cache')
    res.headers.set('Expires', '0')
    return res

  } catch (error) {
    console.error('Error removing hookah:', error)
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}