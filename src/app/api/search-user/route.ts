import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url)
    const phone = url.searchParams.get('phone')

    if (!phone || phone.length !== 4) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await db.getAllUsers()
    console.log('üîç Search-user API: –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allUsers.length)
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const user = allUsers.find(u => {
      const phoneDigits = u.phone.replace(/\D/g, '')
      const last4 = phoneDigits.slice(-4)
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.first_name} ${u.last_name}: ${u.phone} -> ${last4} (–∏—â–µ–º: ${phone})`)
      return last4 === phone
    })
    
    console.log('üîç Search-user API: –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? `${user.first_name} ${user.last_name}` : '–ù–µ—Ç')

    if (!user) {
      return NextResponse.json(
        { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const stocks = await db.getUserStocks(user.id)
    const stock = stocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω')
    const freeHookahs = await db.getFreeHookahs(user.id)
    const unusedFreeHookahs = freeHookahs.filter(h => !h.used)

    const stats = {
      slotsFilled: stock ? Math.floor(stock.progress / 20) : 0,
      slotsRemaining: stock ? 5 - Math.floor(stock.progress / 20) : 5,
      progress: stock ? stock.progress : 0,
      hasFreeHookah: unusedFreeHookahs.length > 0
    }

    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        tg_id: user.tg_id,
        first_name: user.first_name,
        last_name: user.last_name,
        phone: user.phone,
        username: user.username
      },
      stats
    })

  } catch (error) {
    console.error('Error searching user:', error)
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}