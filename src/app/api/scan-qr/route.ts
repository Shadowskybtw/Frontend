import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const activeRequests = new Map<string, number>()

export async function POST(request: NextRequest) {
  const requestId = Math.random().toString(36).substr(2, 9)
  console.log(`üöÄ [${requestId}] QR scan request started`)
  
  let userKey = 'unknown' // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  
  try {
    const { qr_data, phone_digits, admin_key } = await request.json()
    console.log(`üîç [${requestId}] Request data:`, { qr_data: qr_data ? 'provided' : 'missing', phone_digits, admin_key: admin_key ? 'provided' : 'missing' })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª—é—á (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const expectedAdminKey = process.env.ADMIN_KEY || process.env.NEXT_PUBLIC_ADMIN_KEY || 'admin123'
    
    if (admin_key !== expectedAdminKey) {
      return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 })
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userKey = phone_digits || qr_data || 'unknown'
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // if (activeRequests.has(userKey)) {
    //   console.log(`‚ö†Ô∏è [${requestId}] Request already in progress for user ${userKey}, ignoring`)
    //   return NextResponse.json({ success: false, message: 'Request already in progress for this user' }, { status: 429 })
    // }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    activeRequests.set(userKey, Date.now())
    console.log(`üîí [${requestId}] Request locked for user: ${userKey}`)

    let user

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω QR –∫–æ–¥
    if (qr_data) {
      let userData
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        userData = JSON.parse(qr_data)
        console.log('Parsed QR data as JSON:', userData)
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ TG ID
        console.log('QR data is not JSON, treating as raw data:', qr_data)
        
        // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ TG ID
        const numericId = parseInt(qr_data)
        if (!isNaN(numericId)) {
          userData = { tg_id: numericId }
        } else {
          return NextResponse.json({ 
            success: false, 
            message: 'Invalid QR code format. Expected JSON or numeric ID.' 
          }, { status: 400 })
        }
      }
      
      const tgId = userData.tg_id

      if (!tgId) {
        return NextResponse.json({ success: false, message: 'Invalid QR code - no TG ID found' }, { status: 400 })
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ TG ID
      user = await db.getUserByTgId(tgId)
      if (!user) {
        return NextResponse.json({ success: false, message: 'User not found' }, { status: 404 })
      }
    }
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    else if (phone_digits) {
      if (phone_digits.length !== 4 || !/^\d{4}$/.test(phone_digits)) {
        return NextResponse.json({ success: false, message: 'Phone digits must be exactly 4 digits' }, { status: 400 })
      }

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      console.log(`üîç [${requestId}] Searching user by phone digits: ${phone_digits}`)
      const allUsers = await db.getAllUsers()
      console.log(`üìä [${requestId}] Total users found: ${allUsers.length}`)
      
      user = allUsers.find(u => {
        const phone = u.phone.replace(/\D/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        const matches = phone.endsWith(phone_digits)
        console.log(`üìû [${requestId}] Checking user ${u.id}: phone=${u.phone}, clean=${phone}, endsWith=${phone_digits}? ${matches}`)
        return matches
      })

      if (!user) {
        console.log(`‚ùå [${requestId}] User not found for phone digits: ${phone_digits}`)
        return NextResponse.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
      }
      
      console.log(`‚úÖ [${requestId}] User found: ${user.id} (${user.first_name} ${user.last_name})`)
    }
    else {
      return NextResponse.json({ success: false, message: 'QR data or phone digits is required' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ü–∏—é "5+1 –∫–∞–ª—å—è–Ω"
    console.log(`üìä [${requestId}] Getting stocks for user ${user.id}`)
    const userStocks = await db.getUserStocks(user.id)
    console.log(`üìä [${requestId}] User stocks found: ${userStocks.length}`)
    
    let stock = userStocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω')
    console.log(`üìä [${requestId}] Hookah stock found: ${stock ? `ID ${stock.id}, progress ${stock.progress}%` : 'None'}`)
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ü–∏–π, –±–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º ID)
    if (!stock && userStocks.length > 0) {
      const hookahStocks = userStocks.filter(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω')
      console.log(`üìä [${requestId}] Filtered hookah stocks: ${hookahStocks.length}`)
      if (hookahStocks.length > 0) {
        stock = hookahStocks.reduce((latest, current) => 
          current.id > latest.id ? current : latest
        )
        console.log(`üìä [${requestId}] Selected latest stock: ID ${stock.id}, progress ${stock.progress}%`)
      }
    }

    if (!stock) {
      // –°–æ–∑–¥–∞–µ–º –∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      console.log(`üìä [${requestId}] Creating new stock for user ${user.id}`)
      stock = await db.createStock({
        user_id: user.id,
        stock_name: '5+1 –∫–∞–ª—å—è–Ω',
        progress: 0
      })
      console.log(`‚úÖ [${requestId}] Created new stock: ID ${stock.id}`)
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 20%)
    const newProgress = stock.progress + 20
    const newSlotNumber = Math.floor(newProgress / 20)
    
    console.log(`üìä [${requestId}] Updating stock progress:`, { 
      stockId: stock.id, 
      currentProgress: stock.progress, 
      newProgress, 
      newSlotNumber 
    })
    
    const updatedStock = await db.updateStockProgress(stock.id, newProgress)
    
    if (!updatedStock) {
      return NextResponse.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞' }, { status: 500 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
    if (updatedStock.progress >= 100) {
      // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 0
      const resetStock = await db.updateStockProgress(stock.id, 0)
      
      // –ù–ï —Å–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É
      
      return NextResponse.json({ 
        success: true, 
        message: '–ê–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –¥–æ—Å—Ç—É–ø–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.',
        user: {
          id: user.id,
          tg_id: user.tg_id,
          first_name: user.first_name,
          last_name: user.last_name,
          phone: user.phone,
          username: user.username
        },
        stock: resetStock,
        newPromotion: true,
        refreshRequired: true,
        freeHookahAvailable: true // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å—è–Ω–æ–≤
    try {
      console.log(`üìù [${requestId}] Adding to history:`, { 
        userId: user.id, 
        hookahType: 'regular', 
        slotNumber: newSlotNumber,
        stockId: stock.id 
      })
      
      await db.addHookahToHistory(
        user.id, 
        'regular', 
        newSlotNumber,
        stock.id,
        null, // adminId
        'admin_add' // scanMethod
      )
      console.log(`‚úÖ [${requestId}] Hookah added to history successfully`)
    } catch (historyError) {
      console.error(`‚ùå [${requestId}] Error adding to hookah history:`, historyError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    }

    return NextResponse.json({ 
      success: true, 
      message: `‚úÖ –ö–∞–ª—å—è–Ω –¥–æ–±–∞–≤–ª–µ–Ω! –°–ª–æ—Ç ${newSlotNumber}/5 –∑–∞–ø–æ–ª–Ω–µ–Ω`,
      user: {
        id: user.id,
        tg_id: user.tg_id,
        first_name: user.first_name,
        last_name: user.last_name,
        phone: user.phone,
        username: user.username
      },
      stock: updatedStock,
      completed: newProgress >= 100,
      slotNumber: newSlotNumber,
      progress: newProgress
    })

  } catch (error) {
    console.error(`‚ùå [${requestId}] Error scanning QR code:`, error)
    return NextResponse.json(
      { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞: ' + String(error)
      },
      { status: 500 }
    )
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activeRequests.delete(userKey)
    console.log(`üîì [${requestId}] Request unlocked for user: ${userKey}`)
  }
}
