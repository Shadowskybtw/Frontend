import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    const { tg_id } = await request.json()

    if (!tg_id) {
      return NextResponse.json({ success: false, message: 'Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUserByTgId(tg_id)
    if (!user) {
      return NextResponse.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω (—Å–ª–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ 100%)
    const userStocks = await db.getUserStocks(user.id)
    const stock = userStocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω')
    
    if (!stock) {
      return NextResponse.json({ success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω
    const existingFreeHookahs = await db.getUnusedFreeHookahs(user.id)
    if (existingFreeHookahs.length === 0) {
      return NextResponse.json({ success: false, message: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 5 —Å–ª–æ—Ç–æ–≤ –∞–∫—Ü–∏–∏.' }, { status: 400 })
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω
    const freeHookah = existingFreeHookahs[0]
    const usedHookah = await db.useFreeHookah(freeHookah.id)
    
    if (!usedHookah) {
      return NextResponse.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞' }, { status: 500 })
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ promotion_completed, —Ç–∞–∫ –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –ø–æ–ª—É—á–µ–Ω
    await db.updateStockPromotionCompleted(stock.id, false)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞
    try {
      await db.addHookahToHistory(
        user.id, 
        'free', 
        undefined, // slot_number
        stock.id,
        null, // adminId
        'user_claimed' // scanMethod
      )
      console.log('‚úÖ Free hookah claimed and added to history successfully')
    } catch (historyError) {
      console.error('‚ùå Error adding free hookah to history:', historyError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    }

    return NextResponse.json({ 
      success: true, 
      message: 'üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –ø–æ–ª—É—á–µ–Ω! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å!',
      freeHookah: usedHookah
    })

  } catch (error) {
    console.error('Error claiming free hookah:', error)
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
