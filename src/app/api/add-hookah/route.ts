import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    const { user_tg_id, admin_tg_id } = await request.json()

    if (!user_tg_id || !admin_tg_id) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
    const admin = await db.getUserByTgId(admin_tg_id)
    if (!admin) {
      return NextResponse.json(
        { success: false, message: '–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
    const adminTgId = parseInt(process.env.ADMIN_TG_ID || '937011437')
    const isHardcodedAdmin = Number(admin_tg_id) === adminTgId
    const isDbAdmin = await db.isUserAdmin(admin.id)
    const isAdmin = isHardcodedAdmin || isDbAdmin
    
    if (!isAdmin) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUserByTgId(user_tg_id)
    if (!user) {
      return NextResponse.json(
        { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const stocks = await db.getUserStocks(user.id)
    let stock = stocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω')
    
    if (!stock) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      stock = await db.createStock({
        user_id: user.id,
        stock_name: '5+1 –∫–∞–ª—å—è–Ω',
        progress: 0
      })
    }

    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const currentHistory = await db.getHookahHistory(user.id)
    const regularCount = currentHistory.filter(h => h.hookah_type === 'regular').length
    const correctProgress = Math.min(100, regularCount * 20)
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if (stock.progress !== correctProgress) {
      console.log(`‚ö†Ô∏è Fixing progress mismatch before add: ${stock.progress}% -> ${correctProgress}%`)
      await db.updateStockProgress(stock.id, correctProgress)
      stock.progress = correctProgress
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–ª—å—è–Ω (–Ω–µ –±–æ–ª—å—à–µ 5 –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ)
    const currentSlot = Math.floor(stock.progress / 20)
    if (currentSlot >= 5 && stock.progress >= 100) {
      console.log('‚ö†Ô∏è Cannot add: campaign already completed, waiting for reset')
      return NextResponse.json({
        success: false,
        message: '–ê–∫—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞.',
        debug: {
          currentSlot,
          progress: stock.progress
        }
      }, { status: 400 })
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 20% (–æ–¥–∏–Ω —Å–ª–æ—Ç), –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 100%
    const newProgress = Math.min(100, stock.progress + 20)
    await db.updateStockProgress(stock.id, newProgress)

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    await db.addHookahToHistory(
      user.id,
      'regular',
      Math.floor(newProgress / 20), // slot_number
      stock.id,
      admin.id, // adminId
      'admin_add' // scanMethod
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã (100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
    if (newProgress >= 100) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ promotion_completed
      await db.updateStockPromotionCompleted(stock.id, true)
      
      // –°–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      console.log(`üéÅ Creating free hookah for user ${user.id} after promotion completion`)
      const freeHookah = await db.createFreeHookah(user.id)
      console.log(`‚úÖ Free hookah created:`, freeHookah)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞
      try {
        await db.addHookahToHistory(
          user.id,
          'free',
          undefined, // slot_number
          stock.id,
          admin.id, // adminId
          'promotion_completed' // scanMethod
        )
        console.log(`‚úÖ Free hookah added to history`)
      } catch (historyError) {
        console.error(`‚ùå Error adding free hookah to history:`, historyError)
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 0 –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞
      await db.updateStockProgress(stock.id, 0)
    }

    return NextResponse.json({
      success: true,
      message: '–ö–∞–ª—å—è–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      user: {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name
      },
      newProgress
    })

  } catch (error) {
    console.error('Error adding hookah:', error)
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
