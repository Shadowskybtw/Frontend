import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

export async function GET() {
  try {
    console.log('üîç Testing database connection...')
    console.log('üìã DATABASE_URL:', process.env.DATABASE_URL ? 'SET' : 'NOT SET')
    console.log('üìã NODE_ENV:', process.env.NODE_ENV)
    
    const prisma = new PrismaClient()
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect()
    console.log('‚úÖ Database connected')
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.user.count()
    console.log('üë• Users count:', userCount)
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    const historyCount = await prisma.hookahHistory.count()
    console.log('üìù History count:', historyCount)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const firstHistory = await prisma.hookahHistory.findMany({
      take: 3,
      orderBy: { created_at: 'desc' }
    })
    console.log('üìù First 3 history records:', firstHistory)
    
    await prisma.$disconnect()
    
    return NextResponse.json({
      success: true,
      message: 'Database test completed',
      data: {
        databaseUrl: process.env.DATABASE_URL ? 'SET' : 'NOT SET',
        nodeEnv: process.env.NODE_ENV,
        userCount,
        historyCount,
        firstHistory
      }
    })
    
  } catch (error) {
    console.error('‚ùå Database test failed:', error)
    return NextResponse.json({
      success: false,
      message: 'Database test failed',
      error: error instanceof Error ? error.message : 'Unknown error',
      details: {
        databaseUrl: process.env.DATABASE_URL ? 'SET' : 'NOT SET',
        nodeEnv: process.env.NODE_ENV
      }
    }, { status: 500 })
  }
}