import React, { useContext, useEffect, useMemo, useState } from 'react'
import { UserContext } from '../context/UserContext'
import { QRCodeSVG } from 'qrcode.react'
import QrScanner from '../components/QRScanner'
import { userAPI, qrAPI, handleApiError } from '../utils/api'
import styles from '../styles/Promo.module.css'
import Loading from '../components/Loading'

const Promo = () => {
  const { user } = useContext(UserContext)

  // tgId is resolved from Telegram WebApp first, then from our context fallback
  const tgId = useMemo(() => {
    const tId = window?.Telegram?.WebApp?.initDataUnsafe?.user?.id
    return tId || user?.tg_id || user?.id || null
  }, [user])

  const [slots, setSlots] = useState([])
  const [freeHookahs, setFreeHookahs] = useState(0)
  const [showScanner, setShowScanner] = useState(false)

  // üîê Admins who can confirm visits by scanning a guest QR
  const ADMIN_IDS = [123456789, 987654321] // TODO: replace with real Telegram IDs
  const isAdmin = ADMIN_IDS.includes(Number(tgId))

  // Load current progress + free rewards
  useEffect(() => {
    if (!tgId) return

    const loadUserData = async () => {
      try {
        // 1) Progress (open slots)
        const stocksData = await userAPI.getStocks(tgId);
        const list = Array.isArray(stocksData) ? stocksData : Array.isArray(stocksData?.slots) ? stocksData.slots : [];
        setSlots(list.filter((s) => !s.completed));

        // 2) Number of free hookahs
        const hookahData = await userAPI.getFreeHookahs(tgId);
        setFreeHookahs(Number(hookahData?.count) || 0);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        setSlots([]);
        setFreeHookahs(0);
      }
    };

    loadUserData();
  }, [tgId])

  // üéÅ Guest claims a free hookah (only shown when available)
  const handleUseFreeHookah = async () => {
    if (!tgId) return

    try {
      const result = await userAPI.useFreeSlot(tgId);
      if (result?.success) {
        alert('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –≤—ã–¥–∞–Ω');
        setFreeHookahs((prev) => Math.max(prev - 1, 0));
      } else {
        alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤');
      }
    } catch (error) {
      handleApiError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞');
    }
  }

  // üì∑ Admin scans a guest QR (QR contains backend /redeem/{guest_tg_id})
  const handleScan = async (url) => {
    const adminId = window?.Telegram?.WebApp?.initDataUnsafe?.user?.id
    if (!adminId) return alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

    try {
      const result = await qrAPI.redeem(url, adminId);
      alert(result?.message || '–ì–æ—Ç–æ–≤–æ');
      setShowScanner(false);
      
      // –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–æ—Å—Ç—è, –µ—Å–ª–∏ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω —É –≥–æ—Å—Ç—è
      if (tgId) {
        try {
          const stocksData = await userAPI.getStocks(tgId);
          const list = Array.isArray(stocksData) ? stocksData : Array.isArray(stocksData?.slots) ? stocksData.slots : [];
          setSlots(list.filter((s) => !s.completed));
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
      }
    } catch (error) {
      handleApiError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏');
      setShowScanner(false);
    }
  }

  if (!tgId) {
    return <Loading message="–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶" size="medium" />
  }

  // URL –≤ QR –¥–ª—è –≥–æ—Å—Ç—è ‚Äî –∞–¥–º–∏–Ω —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∏–∑–∏—Ç
  const qrUrl = `${process.env.REACT_APP_API_URL || window.__API_BASE__ || 'https://refactored-cod-v6ww469vp657fwqpw-8000.app.github.dev'}/redeem/${tgId}`

  return (
    <div className={styles.promoContainer}>
      <h2 className={styles.promoTitle}>–ê–∫—Ü–∏—è: –í—ã–∫—É—Ä–∏ 5 –∫–∞–ª—å—è–Ω–æ–≤ ‚Äî –ø–æ–ª—É—á–∏ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π</h2>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className={styles.progressSection}>
        <h3 className={styles.progressTitle}>–ü—Ä–æ–≥—Ä–µ—Å—Å</h3>
        <div className={styles.progressBar}>
          {[...Array(5)].map((_, i) => (
            <div
              key={i}
              className={`${styles.progressSlot} ${i < slots.length ? styles.filled : styles.empty}`}
            />
          ))}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ ¬´–ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π¬ª ‚Äî –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω */}
      {freeHookahs > 0 && (
        <div className={styles.freeHookahSection}>
          <p className={styles.freeHookahCount}>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {freeHookahs}</p>
          <button 
            onClick={handleUseFreeHookah} 
            className={styles.claimButton}
            disabled={freeHookahs === 0}
          >
            –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
          </button>
        </div>
      )}

      {/* QR –≥–æ—Å—Ç—è. –ê–¥–º–∏–Ω —Å–∫–∞–Ω–∏—Ä—É–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∞–∫ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ—Ç */}
      <div className={styles.qrSection}>
        <h3 className={styles.qrTitle}>QR‚Äë–∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞–ª—å—è–Ω–∞:</h3>
        <div className={styles.qrCode}>
          <QRCodeSVG value={qrUrl} />
        </div>
      </div>

      {/* –î–æ–ø. –±–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –≥–æ—Å—Ç—è */}
      {isAdmin && (
        <div className={styles.adminSection}>
          <h3 className={styles.adminTitle}>–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</h3>
          <button onClick={() => setShowScanner(true)} className={styles.scanButton}>
            –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –≥–æ—Å—Ç—è
          </button>
          {showScanner && (
            <div className={styles.scannerContainer}>
              <QrScanner onScan={handleScan} />
              <button onClick={() => setShowScanner(false)} className={styles.closeButton}>
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  )
}

export default Promo