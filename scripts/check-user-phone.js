const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUserPhone() {
  try {
    console.log('üìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id = 937011437
    const user = await prisma.user.findUnique({
      where: { tg_id: 937011437 }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (TG: ${user.tg_id})`);
    console.log(`üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${user.phone}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
    const phoneDigits = user.phone.replace(/\D/g, '');
    const last4Digits = phoneDigits.slice(-4);
    console.log(`üî¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã: ${last4Digits}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –≤ API search-user
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É: ${last4Digits}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
    const allUsers = await prisma.user.findMany();
    
    const foundUser = allUsers.find(u => {
      const userPhoneDigits = u.phone.replace(/\D/g, '');
      return userPhoneDigits.endsWith(last4Digits);
    });
    
    if (foundUser) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${foundUser.first_name} ${foundUser.last_name} (TG: ${foundUser.tg_id})`);
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É ${last4Digits}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –±–∞–∑–µ
    console.log(`\nüìã –í—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
    allUsers.forEach((u, index) => {
      const phoneDigits = u.phone.replace(/\D/g, '');
      const last4 = phoneDigits.slice(-4);
      console.log(`   ${index + 1}. ${u.first_name} ${u.last_name}: ${u.phone} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4: ${last4})`);
    });
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserPhone();
