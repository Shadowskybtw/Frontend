const { PrismaClient } = require('@prisma/client');
const Database = require('better-sqlite3');

async function fixDatabaseSchema() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const db = new Database('./prisma/hookah.db');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    const users = db.prepare('SELECT * FROM users').all();
    const adminList = db.prepare('SELECT * FROM admin_list').all();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`üëë –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminList.length}`);
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    console.log('üî® –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users...');
    
    db.exec(`
      CREATE TABLE users_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tg_id INTEGER NOT NULL UNIQUE,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        phone TEXT NOT NULL,
        username TEXT,
        created_at TEXT NOT NULL,
        updated_at TEXT NOT NULL,
        is_admin INTEGER NOT NULL DEFAULT 0,
        total_purchases INTEGER DEFAULT 0,
        total_regular_purchases INTEGER DEFAULT 0,
        total_free_purchases INTEGER DEFAULT 0
      )
    `);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const insertUser = db.prepare(`
      INSERT INTO users_new (
        id, tg_id, first_name, last_name, phone, username,
        created_at, updated_at, is_admin, total_purchases,
        total_regular_purchases, total_free_purchases
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
    
    for (const user of users) {
      insertUser.run(
        user.id,
        user.tg_id,
        user.first_name,
        user.last_name,
        user.phone,
        user.username,
        user.created_at,
        user.updated_at,
        user.is_admin || 0,
        user.total_purchases || 0,
        user.total_regular_purchases || 0,
        user.total_free_purchases || 0
      );
    }
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admin_list
    console.log('üî® –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admin_list...');
    
    db.exec(`
      CREATE TABLE admin_list_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tg_id INTEGER NOT NULL UNIQUE,
        created_at TEXT NOT NULL
      )
    `);
    
    const insertAdmin = db.prepare(`
      INSERT INTO admin_list_new (id, tg_id, created_at)
      VALUES (?, ?, ?)
    `);
    
    for (const admin of adminList) {
      insertAdmin.run(admin.id, admin.tg_id, admin.created_at);
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–≤—ã–º–∏
    console.log('üîÑ –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    
    db.exec('DROP TABLE users');
    db.exec('DROP TABLE admin_list');
    db.exec('ALTER TABLE users_new RENAME TO users');
    db.exec('ALTER TABLE admin_list_new RENAME TO admin_list');
    
    console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get();
    const adminCount = db.prepare('SELECT COUNT(*) as count FROM admin_list').get();
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount.count}`);
    console.log(`   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount.count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error);
  } finally {
    db.close();
  }
}

fixDatabaseSchema();
