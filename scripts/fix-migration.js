const { PrismaClient } = require('@prisma/client');
const Database = require('better-sqlite3');

async function fixMigration() {
  try {
    console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const oldDb = new Database('./hookah.db');
    console.log('‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ
    const prisma = new PrismaClient();
    await prisma.$connect();
    console.log('‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π
    console.log('\nüë• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π...');
    
    const guests = oldDb.prepare('SELECT * FROM guests').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${guests.length} –≥–æ—Å—Ç–µ–π –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É guest_id -> user_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const guestIdToUserId = new Map();
    
    for (const guest of guests) {
      try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        const user = await prisma.user.findUnique({
          where: { tg_id: BigInt(guest.telegram_id) }
        });
        
        if (user) {
          guestIdToUserId.set(guest.id, user.id);
          console.log(`‚úÖ –ì–æ—Å—Ç—å ${guest.id} -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} (TG: ${guest.telegram_id})`);
        } else {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG ID ${guest.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–æ—Å—Ç—è ${guest.id}:`, error.message);
      }
    }
    
    // 2. –¢–µ–ø–µ—Ä—å –º–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏
    console.log('\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏...');
    
    const purchases = oldDb.prepare('SELECT * FROM purchases').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –ø–æ–∫—É–ø–æ–∫ –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ`);
    
    let migratedPurchases = 0;
    let skippedPurchases = 0;
    
    for (const purchase of purchases) {
      try {
        const userId = guestIdToUserId.get(purchase.guest_id);
        
        if (!userId) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≥–æ—Å—Ç—è ${purchase.guest_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É ${purchase.id}`);
          skippedPurchases++;
          continue;
        }
        
        await prisma.hookahHistory.create({
          data: {
            user_id: userId,
            hookah_type: purchase.is_free ? 'free' : 'regular',
            slot_number: null,
            created_at: purchase.created_at ? new Date(purchase.created_at) : new Date()
          }
        });
        
        migratedPurchases++;
        if (migratedPurchases % 100 === 0) {
          console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedPurchases} –ø–æ–∫—É–ø–æ–∫...`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ ${purchase.id}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedPurchases} –ø–æ–∫—É–ø–æ–∫`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ ${skippedPurchases} –ø–æ–∫—É–ø–æ–∫`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = await prisma.user.findMany();
    for (const user of users) {
      try {
        const history = await prisma.hookahHistory.findMany({
          where: { user_id: user.id }
        });
        
        const totalPurchases = history.length;
        const regularPurchases = history.filter(h => h.hookah_type === 'regular').length;
        const freePurchases = history.filter(h => h.hookah_type === 'free').length;
        
        await prisma.user.update({
          where: { id: user.id },
          data: {
            total_purchases: totalPurchases,
            total_regular_purchases: regularPurchases,
            total_free_purchases: freePurchases
          }
        });
        
        if (totalPurchases > 0) {
          console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${user.first_name} ${user.last_name}: ${totalPurchases} –ø–æ–∫—É–ø–æ–∫ (${regularPurchases} –æ–±—ã—á–Ω—ã—Ö, ${freePurchases} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error.message);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    oldDb.close();
    await prisma.$disconnect();
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

fixMigration();
