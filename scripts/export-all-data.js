#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ü–∏–∏ –∏ –∫–∞–ª—å—è–Ω—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç
 */

const { neon } = require('@neondatabase/serverless');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const db = neon(DATABASE_URL);

class DataExporter {
  constructor() {
    this.db = db;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkConnection() {
    try {
      await this.db`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async exportAllData() {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...\n');

      // 1. –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const users = await this.db`
        SELECT 
          id, tg_id, first_name, last_name, phone, username, 
          created_at, updated_at
        FROM users 
        ORDER BY created_at ASC
      `;
      console.log(`   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

      // 2. –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ü–∏–π
      console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ü–∏–π...');
      const stocks = await this.db`
        SELECT 
          s.id, s.user_id, s.stock_name, s.progress, s.created_at, s.updated_at,
          u.tg_id as user_tg_id
        FROM stocks s
        JOIN users u ON s.user_id = u.id
        ORDER BY s.created_at ASC
      `;
      console.log(`   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ü–∏–π: ${stocks.length}`);

      // 3. –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤
      console.log('üéØ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤...');
      const freeHookahs = await this.db`
        SELECT 
          fh.id, fh.user_id, fh.used, fh.used_at, fh.created_at,
          u.tg_id as user_tg_id
        FROM free_hookahs fh
        JOIN users u ON fh.user_id = u.id
        ORDER BY fh.created_at ASC
      `;
      console.log(`   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–ª—å—è–Ω–æ–≤: ${freeHookahs.length}`);

      // 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
      const exportData = {
        metadata: {
          exported_at: new Date().toISOString(),
          exported_by: 'DataExporter',
          version: '1.0',
          total_users: users.length,
          total_stocks: stocks.length,
          total_hookahs: freeHookahs.length
        },
        users: users,
        stocks: stocks,
        free_hookahs: freeHookahs
      };

      // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `full-export-${timestamp}.json`;
      
      fs.writeFileSync(filename, JSON.stringify(exportData, null, 2));
      console.log(`\n‚úÖ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filename}`);
      
      // 6. –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      await this.createCSVFiles(users, stocks, freeHookahs, timestamp);
      
      // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      this.printStatistics(users, stocks, freeHookahs);
      
      return exportData;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤
   */
  async createCSVFiles(users, stocks, freeHookahs, timestamp) {
    console.log('\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤...');

    // CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersCSV = this.createUsersCSV(users);
    const usersFilename = `users-${timestamp}.csv`;
    fs.writeFileSync(usersFilename, usersCSV);
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersFilename}`);

    // CSV –¥–ª—è –∞–∫—Ü–∏–π
    const stocksCSV = this.createStocksCSV(stocks);
    const stocksFilename = `stocks-${timestamp}.csv`;
    fs.writeFileSync(stocksFilename, stocksCSV);
    console.log(`   ‚úÖ –ê–∫—Ü–∏–∏: ${stocksFilename}`);

    // CSV –¥–ª—è –∫–∞–ª—å—è–Ω–æ–≤
    const hookahsCSV = this.createHookahsCSV(freeHookahs);
    const hookahsFilename = `hookahs-${timestamp}.csv`;
    fs.writeFileSync(hookahsFilename, hookahsCSV);
    console.log(`   ‚úÖ –ö–∞–ª—å—è–Ω—ã: ${hookahsFilename}`);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  createUsersCSV(users) {
    const header = 'ID,TG ID,–ò–º—è,–§–∞–º–∏–ª–∏—è,–¢–µ–ª–µ—Ñ–æ–Ω,Username,–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n';
    const rows = users.map(user => 
      `${user.id},${user.tg_id},"${user.first_name}","${user.last_name}","${user.phone}","${user.username || ''}","${new Date(user.created_at).toLocaleString('ru-RU')}","${new Date(user.updated_at).toLocaleString('ru-RU')}"`
    ).join('\n');
    return header + rows;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ CSV –¥–ª—è –∞–∫—Ü–∏–π
   */
  createStocksCSV(stocks) {
    const header = 'ID,User ID,User TG ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏,–ü—Ä–æ–≥—Ä–µ—Å—Å (%),–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è,–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n';
    const rows = stocks.map(stock => 
      `${stock.id},${stock.user_id},${stock.user_tg_id},"${stock.stock_name}",${stock.progress},"${new Date(stock.created_at).toLocaleString('ru-RU')}","${new Date(stock.updated_at).toLocaleString('ru-RU')}"`
    ).join('\n');
    return header + rows;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ CSV –¥–ª—è –∫–∞–ª—å—è–Ω–æ–≤
   */
  createHookahsCSV(hookahs) {
    const header = 'ID,User ID,User TG ID,–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω,–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n';
    const rows = hookahs.map(hookah => 
      `${hookah.id},${hookah.user_id},${hookah.user_tg_id},${hookah.used},"${hookah.used_at ? new Date(hookah.used_at).toLocaleString('ru-RU') : ''}","${new Date(hookah.created_at).toLocaleString('ru-RU')}"`
    ).join('\n');
    return header + rows;
  }

  /**
   * –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  printStatistics(users, stocks, freeHookahs) {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    console.log(`   –í—Å–µ–≥–æ: ${users.length}`);
    
    const recentUsers = users.filter(user => 
      new Date(user.created_at) >= new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
    ).length;
    console.log(`   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: ${recentUsers}`);

    console.log('\nüìä –ê–∫—Ü–∏–∏:');
    console.log(`   –í—Å–µ–≥–æ: ${stocks.length}`);
    const avgProgress = stocks.reduce((sum, stock) => sum + stock.progress, 0) / stocks.length;
    console.log(`   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(avgProgress)}%`);
    const completedStocks = stocks.filter(stock => stock.progress === 100).length;
    console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedStocks}`);

    console.log('\nüéØ –ö–∞–ª—å—è–Ω—ã:');
    console.log(`   –í—Å–µ–≥–æ: ${freeHookahs.length}`);
    const usedHookahs = freeHookahs.filter(hookah => hookah.used).length;
    const unusedHookahs = freeHookahs.filter(hookah => !hookah.used).length;
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usedHookahs}`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${unusedHookahs}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüë§ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:');
    const userStats = users.map(user => {
      const userStocks = stocks.filter(stock => stock.user_id === user.id);
      const userHookahs = freeHookahs.filter(hookah => hookah.user_id === user.id);
      return {
        name: `${user.first_name} ${user.last_name}`,
        tg_id: user.tg_id,
        stocks: userStocks.length,
        hookahs: userHookahs.length,
        avgProgress: userStocks.length > 0 ? Math.round(userStocks.reduce((sum, stock) => sum + stock.progress, 0) / userStocks.length) : 0
      };
    }).sort((a, b) => (b.stocks + b.hookahs) - (a.stocks + a.hookahs));

    userStats.slice(0, 5).forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (TG: ${user.tg_id})`);
      console.log(`      –ê–∫—Ü–∏–π: ${user.stocks}, –ö–∞–ª—å—è–Ω–æ–≤: ${user.hookahs}, –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${user.avgProgress}%`);
    });
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async exportUserData(tgId) {
    try {
      console.log(`üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å TG ID: ${tgId}...\n`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const users = await this.db`
        SELECT * FROM users WHERE tg_id = ${tgId}
      `;

      if (users.length === 0) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG ID ${tgId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      const user = users[0];

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const stocks = await this.db`
        SELECT * FROM stocks WHERE user_id = ${user.id} ORDER BY created_at ASC
      `;

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const freeHookahs = await this.db`
        SELECT * FROM free_hookahs WHERE user_id = ${user.id} ORDER BY created_at ASC
      `;

      const userData = {
        metadata: {
          exported_at: new Date().toISOString(),
          user_tg_id: tgId,
          user_name: `${user.first_name} ${user.last_name}`
        },
        user: user,
        stocks: stocks,
        free_hookahs: freeHookahs
      };

      const filename = `user-${tgId}-export-${new Date().toISOString().split('T')[0]}.json`;
      fs.writeFileSync(filename, JSON.stringify(userData, null, 2));
      
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
      console.log(`   –ê–∫—Ü–∏–π: ${stocks.length}`);
      console.log(`   –ö–∞–ª—å—è–Ω–æ–≤: ${freeHookahs.length}`);

      return userData;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const arg = process.argv[3];
  const exporter = new DataExporter();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connected = await exporter.checkConnection();
    if (!connected) {
      process.exit(1);
    }

    switch (command) {
      case 'all':
        await exporter.exportAllData();
        break;
        
      case 'user':
        if (!arg) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          process.exit(1);
        }
        await exporter.exportUserData(parseInt(arg));
        break;
        
      case 'help':
      default:
        console.log(`
üì§ –°–∫—Ä–∏–ø—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node export-all-data.js <command> [argument]

–ö–æ–º–∞–Ω–¥—ã:
  all           - –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ü–∏–∏, –∫–∞–ª—å—è–Ω—ã)
  user <tg_id>  - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  # –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
  node export-all-data.js all
  
  # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  node export-all-data.js user 123456789

–§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:
  - full-export-YYYY-MM-DD.json - –ø–æ–ª–Ω—ã–π JSON —ç–∫—Å–ø–æ—Ä—Ç
  - users-YYYY-MM-DD.csv - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ CSV
  - stocks-YYYY-MM-DD.csv - –∞–∫—Ü–∏–∏ –≤ CSV  
  - hookahs-YYYY-MM-DD.csv - –∫–∞–ª—å—è–Ω—ã –≤ CSV
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = DataExporter;

