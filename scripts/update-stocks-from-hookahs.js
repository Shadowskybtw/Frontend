#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –≤ –∞–∫—Ü–∏—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤
 * –õ–æ–≥–∏–∫–∞: 5 –∫–∞–ª—å—è–Ω–æ–≤ = 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø–æ—Å–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
 */

const { neon } = require('@neondatabase/serverless');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const db = neon(DATABASE_URL);

class StockUpdater {
  constructor() {
    this.db = db;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkConnection() {
    try {
      await this.db`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async analyzeHookahHistory() {
    try {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –∫–∞–ª—å—è–Ω–∞–º–∏
      const usersWithHookahs = await this.db`
        SELECT 
          u.id as user_id,
          u.tg_id,
          u.first_name,
          u.last_name,
          fh.id as hookah_id,
          fh.used,
          fh.used_at,
          fh.created_at
        FROM users u
        LEFT JOIN free_hookahs fh ON u.id = fh.user_id
        ORDER BY u.id, fh.created_at ASC
      `;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const userHistory = {};
      usersWithHookahs.forEach(row => {
        if (!userHistory[row.user_id]) {
          userHistory[row.user_id] = {
            user_id: row.user_id,
            tg_id: row.tg_id,
            first_name: row.first_name,
            last_name: row.last_name,
            hookahs: []
          };
        }
        if (row.hookah_id) {
          userHistory[row.user_id].hookahs.push({
            id: row.hookah_id,
            used: row.used,
            used_at: row.used_at,
            created_at: row.created_at
          });
        }
      });

      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(userHistory).length}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const analysis = {};
      for (const [userId, userData] of Object.entries(userHistory)) {
        const result = this.analyzeUserHookahs(userData);
        analysis[userId] = result;
        
        if (result.totalHookahs > 0) {
          console.log(`üë§ ${userData.first_name} ${userData.last_name} (TG: ${userData.tg_id}):`);
          console.log(`   –í—Å–µ–≥–æ –∫–∞–ª—å—è–Ω–æ–≤: ${result.totalHookahs}`);
          console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.usedHookahs}`);
          console.log(`   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: ${result.freeHookahsReceived}`);
          console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –∞–∫—Ü–∏–∏: ${result.currentProgress}%`);
          console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π: ${result.lastFreeHookahDate || '–Ω–µ –ø–æ–ª—É—á–∞–ª'}`);
          console.log('');
        }
      }

      return analysis;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞–ª—å—è–Ω–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  analyzeUserHookahs(userData) {
    const hookahs = userData.hookahs.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
    
    let totalHookahs = hookahs.length;
    let usedHookahs = hookahs.filter(h => h.used).length;
    let freeHookahsReceived = 0;
    let currentProgress = 0;
    let lastFreeHookahDate = null;
    let hookahsAfterLastFree = 0;

    // –°—á–∏—Ç–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ)
    const usedHookahsList = hookahs.filter(h => h.used);
    freeHookahsReceived = usedHookahsList.length;
    
    if (freeHookahsReceived > 0) {
      lastFreeHookahDate = usedHookahsList[usedHookahsList.length - 1].used_at;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å—è–Ω
      const lastUsedHookah = usedHookahsList[usedHookahsList.length - 1];
      const lastUsedIndex = hookahs.findIndex(h => h.id === lastUsedHookah.id);
      
      // –°—á–∏—Ç–∞–µ–º –∫–∞–ª—å—è–Ω—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
      hookahsAfterLastFree = totalHookahs - lastUsedIndex - 1;
    } else {
      // –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–µ –±—ã–ª–æ, —Ç–æ –≤—Å–µ –∫–∞–ª—å—è–Ω—ã - —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
      hookahsAfterLastFree = totalHookahs;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫–∞–∂–¥—ã–π –∫–∞–ª—å—è–Ω = 20%, —Ç–∞–∫ –∫–∞–∫ 5 –∫–∞–ª—å—è–Ω–æ–≤ = 100%)
    currentProgress = Math.min(hookahsAfterLastFree * 20, 100);

    return {
      totalHookahs,
      usedHookahs,
      freeHookahsReceived,
      currentProgress,
      lastFreeHookahDate,
      hookahsAfterLastFree
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –≤ –∞–∫—Ü–∏—è—Ö
   */
  async updateStocksFromHookahs() {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –≤ –∞–∫—Ü–∏—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤...\n');

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å—è–Ω–æ–≤
      const analysis = await this.analyzeHookahHistory();

      let updatedStocks = 0;
      let createdStocks = 0;
      let errors = 0;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const [userId, userAnalysis] of Object.entries(analysis)) {
        try {
          if (userAnalysis.totalHookahs === 0) {
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∏–º–µ–µ—Ç –∫–∞–ª—å—è–Ω–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ü–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const existingStocks = await this.db`
            SELECT id, progress FROM stocks WHERE user_id = ${parseInt(userId)}
          `;

          if (existingStocks.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ü–∏—é
            await this.db`
              UPDATE stocks 
              SET progress = ${userAnalysis.currentProgress}, updated_at = NOW()
              WHERE user_id = ${parseInt(userId)}
            `;
            updatedStocks++;
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${userAnalysis.currentProgress}%`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ü–∏—é
            await this.db`
              INSERT INTO stocks (user_id, stock_name, progress, created_at, updated_at)
              VALUES (${parseInt(userId)}, '–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª—å—è–Ω–æ–≤', ${userAnalysis.currentProgress}, NOW(), NOW())
            `;
            createdStocks++;
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${userAnalysis.currentProgress}%`);
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
          errors++;
        }
      }

      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π:');
      console.log(`‚úÖ –ê–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedStocks}`);
      console.log(`‚úÖ –ê–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${createdStocks}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);

      return {
        updated: updatedStocks,
        created: createdStocks,
        errors: errors
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–π:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ü–∏—è–º
   */
  async showStocksStats() {
    try {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ü–∏–π:');
      
      const stats = await this.db`
        SELECT 
          COUNT(*) as total_stocks,
          AVG(progress) as avg_progress,
          COUNT(CASE WHEN progress = 100 THEN 1 END) as completed_stocks,
          COUNT(CASE WHEN progress = 0 THEN 1 END) as zero_progress,
          COUNT(CASE WHEN progress > 0 AND progress < 100 THEN 1 END) as in_progress
        FROM stocks
      `;

      const [stat] = stats;
      console.log(`   –í—Å–µ–≥–æ –∞–∫—Ü–∏–π: ${stat.total_stocks}`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(stat.avg_progress || 0)}%`);
      console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–æ (100%): ${stat.completed_stocks}`);
      console.log(`   –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stat.in_progress}`);
      console.log(`   –ù—É–ª–µ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${stat.zero_progress}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
      const topUsers = await this.db`
        SELECT 
          u.first_name,
          u.last_name,
          u.tg_id,
          s.progress
        FROM stocks s
        JOIN users u ON s.user_id = u.id
        ORDER BY s.progress DESC
        LIMIT 10
      `;

      console.log('\nüèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É:');
      topUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.first_name} ${user.last_name} (TG: ${user.tg_id}): ${user.progress}%`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ü–∏–π:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async showUserDetails(tgId) {
    try {
      const user = await this.db`
        SELECT 
          u.id, u.tg_id, u.first_name, u.last_name,
          s.progress, s.stock_name, s.created_at as stock_created_at
        FROM users u
        LEFT JOIN stocks s ON u.id = s.user_id
        WHERE u.tg_id = ${parseInt(tgId)}
        LIMIT 1
      `;

      if (user.length === 0) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG ID ${tgId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      const userData = user[0];
      console.log(`\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:`);
      console.log(`   –ò–º—è: ${userData.first_name} ${userData.last_name}`);
      console.log(`   TG ID: ${userData.tg_id}`);
      console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –∞–∫—Ü–∏–∏: ${userData.progress || 0}%`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏: ${userData.stock_name || '–Ω–µ —Å–æ–∑–¥–∞–Ω–∞'}`);

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å—è–Ω–æ–≤
      const hookahs = await this.db`
        SELECT 
          id, used, used_at, created_at
        FROM free_hookahs
        WHERE user_id = ${userData.id}
        ORDER BY created_at ASC
      `;

      console.log(`\nüéØ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å—è–Ω–æ–≤ (${hookahs.length} —à—Ç—É–∫):`);
      hookahs.forEach((hookah, index) => {
        const status = hookah.used ? '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–¥–æ—Å—Ç—É–ø–µ–Ω';
        const date = hookah.used ? hookah.used_at : hookah.created_at;
        console.log(`   ${index + 1}. ${status} (${new Date(date).toLocaleString('ru-RU')})`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error.message);
      throw error;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const arg = process.argv[3];
  const updater = new StockUpdater();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connected = await updater.checkConnection();
    if (!connected) {
      process.exit(1);
    }

    switch (command) {
      case 'analyze':
        await updater.analyzeHookahHistory();
        break;
        
      case 'update':
        await updater.updateStocksFromHookahs();
        break;
        
      case 'stats':
        await updater.showStocksStats();
        break;
        
      case 'user':
        if (!arg) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          process.exit(1);
        }
        await updater.showUserDetails(parseInt(arg));
        break;
        
      case 'help':
      default:
        console.log(`
üìä –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node update-stocks-from-hookahs.js <command> [argument]

–ö–æ–º–∞–Ω–¥—ã:
  analyze         - –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  update          - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –≤ –∞–∫—Ü–∏—è—Ö
  stats           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ü–∏–π
  user <tg_id>    - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  DATABASE_URL  - URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä—ã:
  # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤
  DATABASE_URL="–≤–∞—à_url" node update-stocks-from-hookahs.js analyze
  
  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–π
  DATABASE_URL="–≤–∞—à_url" node update-stocks-from-hookahs.js update
  
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ü–∏–π
  DATABASE_URL="–≤–∞—à_url" node update-stocks-from-hookahs.js stats
  
  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  DATABASE_URL="–≤–∞—à_url" node update-stocks-from-hookahs.js user 123456789

–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
  - 5 –∫–∞–ª—å—è–Ω–æ–≤ = 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (100% –ø—Ä–æ–≥—Ä–µ—Å—Å)
  - –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
  - –ü—Ä–æ–≥—Ä–µ—Å—Å = (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ) * 20%
  - –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–µ –±—ã–ª–æ, —Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å = (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤) * 20%
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = StockUpdater;
