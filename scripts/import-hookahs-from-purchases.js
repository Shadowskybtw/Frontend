#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–ª—å—è–Ω–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã purchases —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –õ–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è (is_free = true), —Ç–æ —ç—Ç–æ –∫–∞–ª—å—è–Ω
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
 */

const { neon } = require('@neondatabase/serverless');
const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TARGET_DATABASE_URL = process.env.TARGET_DATABASE_URL || process.env.DATABASE_URL;

if (!TARGET_DATABASE_URL) {
  console.error('‚ùå TARGET_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const targetDb = neon(TARGET_DATABASE_URL);

class HookahImporter {
  constructor() {
    this.targetDb = targetDb;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkTargetConnection() {
    try {
      await this.targetDb`SELECT 1`;
      console.log('‚úÖ Target database: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
      return true;
    } catch (error) {
      console.log('‚ùå Target database: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã purchases –≤ SQLite
   */
  async analyzePurchases(dbPath) {
    try {
      console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã purchases –≤ ${dbPath}...`);
      
      return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, (err) => {
          if (err) {
            reject(err);
            return;
          }

          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ (–∫–∞–ª—å—è–Ω—ã)
          db.all(`
            SELECT 
              p.id,
              p.guest_id,
              p.admin_id,
              p.is_free,
              p.created_at,
              p.rating,
              p.rating_comment,
              g.telegram_id,
              g.first_name,
              g.last_name
            FROM purchases p
            LEFT JOIN guests g ON p.guest_id = g.id
            WHERE p.is_free = 1
            ORDER BY p.created_at ASC
          `, (err, freePurchases) => {
            if (err) {
              reject(err);
              return;
            }

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ (–∫–∞–ª—å—è–Ω–æ–≤): ${freePurchases.length}`);

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const userHookahs = {};
            freePurchases.forEach(purchase => {
              if (purchase.guest_id && purchase.telegram_id) {
                if (!userHookahs[purchase.telegram_id]) {
                  userHookahs[purchase.telegram_id] = {
                    telegram_id: purchase.telegram_id,
                    first_name: purchase.first_name,
                    last_name: purchase.last_name,
                    hookahs: []
                  };
                }
                userHookahs[purchase.telegram_id].hookahs.push(purchase);
              }
            });

            console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–ª—å—è–Ω–∞–º–∏: ${Object.keys(userHookahs).length}`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            Object.values(userHookahs).forEach(user => {
              console.log(`   ${user.first_name} ${user.last_name} (TG: ${user.telegram_id}): ${user.hookahs.length} –∫–∞–ª—å—è–Ω–æ–≤`);
            });

            db.close();
            resolve({
              totalFreePurchases: freePurchases.length,
              usersWithHookahs: Object.keys(userHookahs).length,
              userHookahs: userHookahs
            });
          });
        });
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ purchases:', error.message);
      throw error;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã purchases
   */
  async importHookahsFromPurchases(dbPath) {
    try {
      console.log(`üîÑ –ò–º–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤ –∏–∑ ${dbPath}...`);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      await this.createBackup();

      return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, async (err) => {
          if (err) {
            reject(err);
            return;
          }

          try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ (–∫–∞–ª—å—è–Ω—ã)
            const freePurchases = await this.getFreePurchases(db);
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${freePurchases.length}`);

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const userHookahs = this.groupHookahsByUser(freePurchases);
            console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–ª—å—è–Ω–∞–º–∏: ${Object.keys(userHookahs).length}`);

            let importedHookahs = 0;
            let skippedUsers = 0;
            let errors = 0;

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª—å—è–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const [telegramId, userData] of Object.entries(userHookahs)) {
              try {
                console.log(`\nüë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.first_name} ${userData.last_name} (TG: ${telegramId})`);
                
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
                const users = await this.targetDb`
                  SELECT id FROM users WHERE tg_id = ${parseInt(telegramId)} LIMIT 1
                `;
                
                if (users.length === 0) {
                  console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                  skippedUsers++;
                  continue;
                }

                const userId = users[0].id;
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —Å ID: ${userId}`);

                // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.targetDb`
                  DELETE FROM free_hookahs WHERE user_id = ${userId}
                `;
                console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);

                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª—å—è–Ω—ã
                for (const hookah of userData.hookahs) {
                  const isUsed = hookah.rating !== null && hookah.rating > 0; // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, –∑–Ω–∞—á–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                  
                  await this.targetDb`
                    INSERT INTO free_hookahs (user_id, used, used_at, created_at)
                    VALUES (${userId}, ${isUsed}, ${isUsed ? hookah.created_at : null}, ${hookah.created_at})
                  `;
                  importedHookahs++;
                }

                console.log(`üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–ª—å—è–Ω–æ–≤: ${userData.hookahs.length}`);

              } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞–ª—å—è–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, error.message);
                errors++;
              }
            }

            console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–ª—å—è–Ω–æ–≤:');
            console.log(`‚úÖ –ö–∞–ª—å—è–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedHookahs}`);
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedUsers}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);

            db.close();
            resolve({
              imported: importedHookahs,
              skipped: skippedUsers,
              errors: errors
            });

          } catch (error) {
            db.close();
            reject(error);
          }
        });
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞–ª—å—è–Ω–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∏–∑ SQLite
   */
  getFreePurchases(db) {
    return new Promise((resolve, reject) => {
      db.all(`
        SELECT 
          p.id,
          p.guest_id,
          p.admin_id,
          p.is_free,
          p.created_at,
          p.rating,
          p.rating_comment,
          g.telegram_id,
          g.first_name,
          g.last_name
        FROM purchases p
        LEFT JOIN guests g ON p.guest_id = g.id
        WHERE p.is_free = 1 AND g.telegram_id IS NOT NULL
        ORDER BY p.created_at ASC
      `, (err, rows) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(rows);
      });
    });
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞–ª—å—è–Ω–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  groupHookahsByUser(freePurchases) {
    const userHookahs = {};
    
    freePurchases.forEach(purchase => {
      if (purchase.guest_id && purchase.telegram_id) {
        if (!userHookahs[purchase.telegram_id]) {
          userHookahs[purchase.telegram_id] = {
            telegram_id: purchase.telegram_id,
            first_name: purchase.first_name,
            last_name: purchase.last_name,
            hookahs: []
          };
        }
        userHookahs[purchase.telegram_id].hookahs.push(purchase);
      }
    });

    return userHookahs;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
   */
  async createBackup() {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –∫–∞–ª—å—è–Ω–æ–≤...');
      
      const users = await this.targetDb`
        SELECT 
          id, tg_id, first_name, last_name, phone, username, 
          created_at, updated_at
        FROM users 
        ORDER BY created_at ASC
      `;

      const stocks = await this.targetDb`
        SELECT 
          s.id, s.user_id, s.stock_name, s.progress, s.created_at, s.updated_at,
          u.tg_id as user_tg_id
        FROM stocks s
        JOIN users u ON s.user_id = u.id
        ORDER BY s.created_at ASC
      `;

      const freeHookahs = await this.targetDb`
        SELECT 
          fh.id, fh.user_id, fh.used, fh.used_at, fh.created_at,
          u.tg_id as user_tg_id
        FROM free_hookahs fh
        JOIN users u ON fh.user_id = u.id
        ORDER BY fh.created_at ASC
      `;

      const backupData = {
        metadata: {
          exported_at: new Date().toISOString(),
          exported_by: 'HookahImporter',
          version: '1.0',
          total_users: users.length,
          total_stocks: stocks.length,
          total_hookahs: freeHookahs.length
        },
        users: users,
        stocks: stocks,
        free_hookahs: freeHookahs
      };
      
      const backupFilename = `backup-before-hookah-import-${new Date().toISOString().split('T')[0]}.json`;
      
      fs.writeFileSync(backupFilename, JSON.stringify(backupData, null, 2));
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFilename}`);
      console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}, –ê–∫—Ü–∏–π: ${stocks.length}, –ö–∞–ª—å—è–Ω–æ–≤: ${freeHookahs.length}`);
      
      return backupFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
      throw error;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const dbPath = process.argv[3];
  const importer = new HookahImporter();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
    await importer.checkTargetConnection();

    switch (command) {
      case 'analyze':
        if (!dbPath) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ .db —Ñ–∞–π–ª—É');
          process.exit(1);
        }
        await importer.analyzePurchases(dbPath);
        break;
        
      case 'import':
        if (!dbPath) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ .db —Ñ–∞–π–ª—É');
          process.exit(1);
        }
        await importer.importHookahsFromPurchases(dbPath);
        break;
        
      case 'backup':
        await importer.createBackup();
        break;
        
      case 'help':
      default:
        console.log(`
üéØ –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–ª—å—è–Ω–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã purchases

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node import-hookahs-from-purchases.js <command> [db_path]

–ö–æ–º–∞–Ω–¥—ã:
  analyze <db_path>  - –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã purchases (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏)
  import <db_path>   - –ò–º–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤ –∏–∑ purchases
  backup             - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  help               - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TARGET_DATABASE_URL  - URL —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä—ã:
  # –ê–Ω–∞–ª–∏–∑ purchases
  TARGET_DATABASE_URL="–≤–∞—à_url" node import-hookahs-from-purchases.js analyze hookah.db
  
  # –ò–º–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤
  TARGET_DATABASE_URL="–≤–∞—à_url" node import-hookahs-from-purchases.js import hookah.db
  
  # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  TARGET_DATABASE_URL="–≤–∞—à_url" node import-hookahs-from-purchases.js backup

–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
  - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ (is_free = 1) = –∫–∞–ª—å—è–Ω—ã
  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
  - –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (rating > 0), —Ç–æ –∫–∞–ª—å—è–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
  - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = HookahImporter;
