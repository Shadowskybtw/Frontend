const Database = require('better-sqlite3');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const oldDbPath = path.join(__dirname, '../hookah.db');
const oldDb = new Database(oldDbPath);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π Prisma –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const newDbPath = path.join(__dirname, '../prisma/hookah.db');
const newDb = new Database(newDbPath);

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –≤ Prisma...');

try {
  // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  newDb.exec('BEGIN TRANSACTION;');

  console.log('üìä –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (guests -> users)...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
  const guests = oldDb.prepare('SELECT * FROM guests').all();
  console.log(`   –ù–∞–π–¥–µ–Ω–æ ${guests.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–æ–≤—É—é –±–∞–∑—É
  const insertUser = newDb.prepare(`
    INSERT OR IGNORE INTO users (
      tg_id, first_name, last_name, username, phone, 
      is_admin, created_at, updated_at, total_purchases
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
  `);
  
  let usersMigrated = 0;
  for (const guest of guests) {
    try {
      insertUser.run(
        parseInt(guest.telegram_id),  // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
        String(guest.first_name || ''),
        String(guest.last_name || ''),
        '', // username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ
        String(guest.phone || ''),
        false, // is_admin –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        String(guest.created_at || new Date().toISOString()),
        new Date().toISOString(),
        guest.total_purchases ? parseInt(guest.total_purchases) : 0
      );
      usersMigrated++;
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${guest.telegram_id}: ${error.message}`);
    }
  }
  console.log(`   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${usersMigrated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  console.log('üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ (purchases -> stocks)...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
  const purchases = oldDb.prepare('SELECT * FROM purchases').all();
  console.log(`   –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –ø–æ–∫—É–ø–æ–∫`);
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ –∫–∞–∫ –∑–∞–ø–∞—Å—ã –≤ –Ω–æ–≤—É—é –±–∞–∑—É
  const insertStock = newDb.prepare(`
    INSERT OR IGNORE INTO stocks (
      user_id, created_at, updated_at
    ) VALUES (?, ?, ?)
  `);
  
  let stocksMigrated = 0;
  for (const purchase of purchases) {
    try {
      insertStock.run(
        purchase.guest_id,
        purchase.created_at || new Date().toISOString(),
        new Date().toISOString()
      );
      stocksMigrated++;
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ ${purchase.id}: ${error.message}`);
    }
  }
  console.log(`   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${stocksMigrated} –∑–∞–ø–∞—Å–æ–≤`);

  console.log('üëë –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (admins -> admin_list)...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
  const admins = oldDb.prepare('SELECT * FROM admins').all();
  console.log(`   –ù–∞–π–¥–µ–Ω–æ ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –Ω–æ–≤—É—é –±–∞–∑—É
  const insertAdmin = newDb.prepare(`
    INSERT OR IGNORE INTO admin_list (
      tg_id, created_at
    ) VALUES (?, ?)
  `);
  
  let adminsMigrated = 0;
  for (const admin of admins) {
    try {
      insertAdmin.run(
        admin.telegram_id,  // –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è telegram_id –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ
        admin.created_at || new Date().toISOString()
      );
      adminsMigrated++;
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.telegram_id}: ${error.message}`);
    }
  }
  console.log(`   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${adminsMigrated} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ is_admin —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ is_admin...');
  const updateAdminFlags = newDb.prepare(`
    UPDATE users 
    SET is_admin = true, updated_at = ?
    WHERE tg_id IN (SELECT tg_id FROM admin_list)
  `);
  const updateResult = updateAdminFlags.run(new Date().toISOString());
  console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.changes} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã`);

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  newDb.exec('COMMIT;');
  
  console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersMigrated}`);
  console.log(`   - –ó–∞–ø–∞—Å—ã: ${stocksMigrated}`);
  console.log(`   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminsMigrated}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const userCount = newDb.prepare('SELECT COUNT(*) as count FROM users').get();
  const stockCount = newDb.prepare('SELECT COUNT(*) as count FROM stocks').get();
  const adminCount = newDb.prepare('SELECT COUNT(*) as count FROM admin_list').get();
  
  console.log(`\nüìà –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Prisma –±–∞–∑–µ:`);
  console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount.count}`);
  console.log(`   - –ó–∞–ø–∞—Å—ã: ${stockCount.count}`);
  console.log(`   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminCount.count}`);

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  newDb.exec('ROLLBACK;');
  process.exit(1);
} finally {
  oldDb.close();
  newDb.close();
}
