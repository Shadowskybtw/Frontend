const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkHistoryData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalUsers = await prisma.user.count();
    const totalHistory = await prisma.hookahHistory.count();
    const totalReviews = await prisma.hookahReview.count();
    
    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`   üìù –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${totalHistory}`);
    console.log(`   ‚≠ê –û—Ç–∑—ã–≤–æ–≤: ${totalReviews}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id = 937011437
    const testUser = await prisma.user.findUnique({
      where: { tg_id: 937011437 }
    });
    
    if (testUser) {
      console.log(`\nüë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${testUser.first_name} ${testUser.last_name}`);
      console.log(`   ID: ${testUser.id}`);
      console.log(`   TG ID: ${testUser.tg_id}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${testUser.phone}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userHistory = await prisma.hookahHistory.findMany({
        where: { user_id: testUser.id },
        orderBy: { created_at: 'desc' },
        take: 10
      });
      
      console.log(`\nüìù –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å—è–Ω–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${userHistory.length}`);
      
      userHistory.forEach((record, index) => {
        console.log(`   ${index + 1}. ID: ${record.id}, –¢–∏–ø: ${record.hookah_type}, –î–∞—Ç–∞: ${record.created_at}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã
      const userReviews = await prisma.hookahReview.findMany({
        where: { user_id: testUser.id },
        take: 5
      });
      
      console.log(`\n‚≠ê –û—Ç–∑—ã–≤—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):`);
      console.log(`   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${userReviews.length}`);
      
      userReviews.forEach((review, index) => {
        console.log(`   ${index + 1}. –ö–∞–ª—å—è–Ω ID: ${review.hookah_id}, –†–µ–π—Ç–∏–Ω–≥: ${review.rating}, –¢–µ–∫—Å—Ç: ${review.review_text || '–ù–µ—Ç'}`);
      });
      
    } else {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id = 937011437 –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
    console.log(`\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):`);
    const recentHistory = await prisma.hookahHistory.findMany({
      orderBy: { created_at: 'desc' },
      take: 5,
      include: {
        user: {
          select: {
            first_name: true,
            last_name: true,
            tg_id: true
          }
        }
      }
    });
    
    recentHistory.forEach((record, index) => {
      console.log(`   ${index + 1}. ${record.user.first_name} ${record.user.last_name} (TG: ${record.user.tg_id}) - ${record.hookah_type} - ${record.created_at}`);
    });
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkHistoryData();
