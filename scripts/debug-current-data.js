const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugCurrentData() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id = 937011437
    const user = await prisma.user.findUnique({
      where: { tg_id: 937011437 }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (ID: ${user.id})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º stocks
    console.log('\nüì¶ Stocks –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const stocks = await prisma.stock.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' }
    });
    
    stocks.forEach((stock, index) => {
      console.log(`   ${index + 1}. ID: ${stock.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${stock.stock_name}", –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stock.progress}%`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º stock "5+1 –∫–∞–ª—å—è–Ω"
    const stock5Plus1 = stocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω');
    if (stock5Plus1) {
      const slotsFilled = Math.floor(stock5Plus1.progress / 20);
      const slotsRemaining = 5 - slotsFilled;
      console.log(`\nüéØ Stock "5+1 –∫–∞–ª—å—è–Ω":`);
      console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stock5Plus1.progress}%`);
      console.log(`   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${slotsFilled}/5`);
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: ${slotsRemaining}`);
    } else {
      console.log('\n‚ùå Stock "5+1 –∫–∞–ª—å—è–Ω" –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å—è–Ω–æ–≤
    console.log('\nüìù –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å—è–Ω–æ–≤:');
    const history = await prisma.hookahHistory.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' },
      take: 10
    });
    
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${history.length}`);
    if (history.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:');
      history.forEach((record, index) => {
        console.log(`     ${index + 1}. ID: ${record.id}, –¢–∏–ø: ${record.hookah_type}, –î–∞—Ç–∞: ${record.created_at}`);
      });
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–∞–ª—å—è–Ω–æ–≤
    const regularCount = history.filter(h => h.hookah_type === 'regular').length;
    const freeCount = history.filter(h => h.hookah_type === 'free').length;
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª—å—è–Ω–æ–≤:`);
    console.log(`   üîµ –û–±—ã—á–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã: ${regularCount}`);
    console.log(`   üü¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã: ${freeCount}`);
    console.log(`   üìã –í—Å–µ–≥–æ –∫–∞–ª—å—è–Ω–æ–≤: ${history.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã
    console.log('\nüéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã:');
    const freeHookahs = await prisma.freeHookah.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' }
    });
    
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${freeHookahs.length}`);
    if (freeHookahs.length > 0) {
      const unusedCount = freeHookahs.filter(h => !h.used).length;
      console.log(`   –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: ${unusedCount}`);
      console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: ${freeHookahs.length - unusedCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã
    console.log('\n‚≠ê –û—Ç–∑—ã–≤—ã:');
    const reviews = await prisma.hookahReview.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' }
    });
    
    console.log(`   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviews.length}`);
    if (reviews.length > 0) {
      const avgRating = reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length;
      console.log(`   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${avgRating.toFixed(1)}/5`);
    }
    
    console.log('\nüéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugCurrentData();
