const { PrismaClient } = require('@prisma/client');
const Database = require('better-sqlite3');

async function migrateFromOldDb() {
  try {
    console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const oldDb = new Database('./hookah.db');
    console.log('‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ
    const prisma = new PrismaClient();
    await prisma.$connect();
    console.log('‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ—Å—Ç–µ–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ—Å—Ç–µ–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const guests = oldDb.prepare('SELECT * FROM guests').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${guests.length} –≥–æ—Å—Ç–µ–π –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ`);
    
    for (const guest of guests) {
      try {
        await prisma.user.create({
          data: {
            tg_id: BigInt(guest.tg_id),
            first_name: guest.first_name || 'Unknown',
            last_name: guest.last_name || '',
            phone: guest.phone || '',
            username: guest.username,
            created_at: new Date(guest.created_at || Date.now()),
            updated_at: new Date(guest.updated_at || Date.now()),
            is_admin: Boolean(guest.is_admin),
            total_purchases: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ purchases
            total_regular_purchases: 0,
            total_free_purchases: 0
          }
        });
        console.log(`‚úÖ –ì–æ—Å—Ç—å ${guest.first_name} ${guest.last_name} (TG: ${guest.tg_id}) –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è –ì–æ—Å—Ç—å ${guest.first_name} ${guest.last_name} (TG: ${guest.tg_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç—è ${guest.first_name} ${guest.last_name}:`, error.message);
        }
      }
    }
    
    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –≤ hookah_history
    console.log('\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –≤ hookah_history...');
    
    const purchases = oldDb.prepare('SELECT * FROM purchases').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –ø–æ–∫—É–ø–æ–∫ –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ`);
    
    let migratedPurchases = 0;
    for (const purchase of purchases) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
        const user = await prisma.user.findUnique({
          where: { tg_id: BigInt(purchase.tg_id) }
        });
        
        if (!user) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG ID ${purchase.tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É ${purchase.id}`);
          continue;
        }
        
        await prisma.hookahHistory.create({
          data: {
            user_id: user.id,
            hookah_type: purchase.type || 'regular',
            slot_number: purchase.slot_number || null,
            created_at: new Date(purchase.created_at || Date.now())
          }
        });
        
        migratedPurchases++;
        if (migratedPurchases % 100 === 0) {
          console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedPurchases} –ø–æ–∫—É–ø–æ–∫...`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ ${purchase.id}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedPurchases} –ø–æ–∫—É–ø–æ–∫`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = await prisma.user.findMany();
    for (const user of users) {
      try {
        const history = await prisma.hookahHistory.findMany({
          where: { user_id: user.id }
        });
        
        const totalPurchases = history.length;
        const regularPurchases = history.filter(h => h.hookah_type === 'regular').length;
        const freePurchases = history.filter(h => h.hookah_type === 'free').length;
        
        await prisma.user.update({
          where: { id: user.id },
          data: {
            total_purchases: totalPurchases,
            total_regular_purchases: regularPurchases,
            total_free_purchases: freePurchases
          }
        });
        
        console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${user.first_name} ${user.last_name}: ${totalPurchases} –ø–æ–∫—É–ø–æ–∫`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error.message);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    oldDb.close();
    await prisma.$disconnect();
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

migrateFromOldDb();
