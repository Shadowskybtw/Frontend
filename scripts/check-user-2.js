const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUser2() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    const tgId = 6922083035;
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { tg_id: tgId }
    });
    
    if (user) {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   TG ID: ${user.tg_id}`);
      console.log(`   –ò–º—è: ${user.first_name} ${user.last_name}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}`);
      console.log(`   Username: ${user.username}`);
      console.log(`   –ê–¥–º–∏–Ω: ${user.is_admin}`);
      console.log(`   –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: ${user.total_purchases}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º stocks
      const stocks = await prisma.stock.findMany({
        where: { user_id: user.id }
      });
      console.log(`\nüì¶ Stocks: ${stocks.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      const history = await prisma.hookahHistory.findMany({
        where: { user_id: user.id }
      });
      console.log(`üìù –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å—è–Ω–æ–≤: ${history.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã
      const freeHookahs = await prisma.freeHookah.findMany({
        where: { user_id: user.id }
      });
      console.log(`üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã: ${freeHookahs.length} –∑–∞–ø–∏—Å–µ–π`);
      
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id = ${tgId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const similarUsers = await prisma.user.findMany({
        where: {
          OR: [
            { first_name: { contains: '–ù–∏–∫–æ–ª–∞–π' } },
            { last_name: { contains: '–ì–∏—Ç–ª–µ—Ä' } },
            { username: { contains: 'skywrldbtw' } }
          ]
        }
      });
      
      console.log(`\nüîç –ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${similarUsers.length}):`);
      similarUsers.forEach((u, index) => {
        console.log(`   ${index + 1}. ID: ${u.id}, TG: ${u.tg_id}, –ò–º—è: ${u.first_name} ${u.last_name}, Username: ${u.username}`);
      });
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUser2();
