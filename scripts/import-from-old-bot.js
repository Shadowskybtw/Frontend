#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
 */

const { neon } = require('@neondatabase/serverless');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TARGET_DATABASE_URL = process.env.TARGET_DATABASE_URL || process.env.DATABASE_URL;
const OLD_DATABASE_URL = process.env.OLD_DATABASE_URL;

if (!TARGET_DATABASE_URL) {
  console.error('‚ùå TARGET_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const targetDb = neon(TARGET_DATABASE_URL);
const oldDb = OLD_DATABASE_URL ? neon(OLD_DATABASE_URL) : null;

class OldBotImporter {
  constructor() {
    this.targetDb = targetDb;
    this.oldDb = oldDb;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
   */
  async checkConnections() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      await this.targetDb`SELECT 1`;
      console.log('‚úÖ Target database: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
    } catch (error) {
      console.log('‚ùå Target database: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      throw error;
    }
    
    if (this.oldDb) {
      try {
        await this.oldDb`SELECT 1`;
        console.log('‚úÖ Old database: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
      } catch (error) {
        console.log('‚ùå Old database: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        throw error;
      }
    } else {
      console.log('‚ö†Ô∏è  Old database: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–∞–π–ª–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç)');
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
   */
  async importFromJSONFile(filename) {
    try {
      if (!fs.existsSync(filename)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
      }

      console.log(`üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞: ${filename}`);
      
      const data = JSON.parse(fs.readFileSync(filename, 'utf8'));
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
      const format = this.detectDataFormat(data);
      console.log(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: ${format}`);
      
      let users = [];
      let stocks = [];
      let hookahs = [];

      switch (format) {
        case 'full_export':
          users = data.users || [];
          stocks = data.stocks || [];
          hookahs = data.free_hookahs || [];
          break;
          
        case 'users_array':
          users = Array.isArray(data) ? data : [];
          break;
          
        case 'nested_users':
          users = data.map(item => item.user || item).filter(Boolean);
          stocks = data.flatMap(item => item.stocks || []);
          hookahs = data.flatMap(item => item.freeHookahs || item.free_hookahs || []);
          break;
          
        case 'single_user':
          users = [data];
          break;
          
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: ${format}`);
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      console.log(`   –ê–∫—Ü–∏–π: ${stocks.length}`);
      console.log(`   –ö–∞–ª—å—è–Ω–æ–≤: ${hookahs.length}`);

      return await this.importData(users, stocks, hookahs);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ JSON —Ñ–∞–π–ª–∞:', error.message);
      throw error;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
   */
  async importFromCSVFile(filename) {
    try {
      if (!fs.existsSync(filename)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
      }

      console.log(`üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞: ${filename}`);
      
      const csvContent = fs.readFileSync(filename, 'utf8');
      const lines = csvContent.split('\n').filter(line => line.trim());
      
      if (lines.length < 2) {
        throw new Error('CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
      }

      const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
      const users = [];

      for (let i = 1; i < lines.length; i++) {
        const values = this.parseCSVLine(lines[i]);
        if (values.length !== headers.length) continue;

        const user = {};
        headers.forEach((header, index) => {
          user[header] = values[index];
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const mappedUser = this.mapUserData(user);
        if (mappedUser) {
          users.push(mappedUser);
        }
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${users.length}`);
      return await this.importData(users, [], []);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ CSV —Ñ–∞–π–ª–∞:', error.message);
      throw error;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async importFromOldDatabase() {
    if (!this.oldDb) {
      throw new Error('–°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    try {
      console.log('üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
      const users = await this.oldDb`
        SELECT * FROM users ORDER BY created_at ASC
      `;
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: ${users.length}`);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      let stocks = [];
      try {
        stocks = await this.oldDb`
          SELECT * FROM stocks ORDER BY created_at ASC
        `;
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ü–∏–π –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: ${stocks.length}`);
      } catch (error) {
        console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ stocks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª—å—è–Ω—ã –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      let hookahs = [];
      try {
        hookahs = await this.oldDb`
          SELECT * FROM free_hookahs ORDER BY created_at ASC
        `;
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª—å—è–Ω–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: ${hookahs.length}`);
      } catch (error) {
        console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ free_hookahs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ');
      }

      return await this.importData(users, stocks, hookahs);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async importData(users, stocks, hookahs) {
    try {
      console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
      
      let importedUsers = 0;
      let skippedUsers = 0;
      let errors = 0;
      const userMapping = new Map(); // –°—Ç–∞—Ä—ã–π ID -> –ù–æ–≤—ã–π ID

      // –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const user of users) {
        try {
          const mappedUser = this.mapUserData(user);
          if (!mappedUser) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
            skippedUsers++;
            continue;
          }

          console.log(`üë§ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${mappedUser.first_name} ${mappedUser.last_name} (TG ID: ${mappedUser.tg_id})`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existingUser = await this.targetDb`
            SELECT id FROM users WHERE tg_id = ${mappedUser.tg_id} LIMIT 1
          `;
          
          if (existingUser.length > 0) {
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            skippedUsers++;
            continue;
          }

          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const [newUser] = await this.targetDb`
            INSERT INTO users (tg_id, first_name, last_name, phone, username, created_at, updated_at)
            VALUES (${mappedUser.tg_id}, ${mappedUser.first_name}, ${mappedUser.last_name}, ${mappedUser.phone}, ${mappedUser.username}, ${mappedUser.created_at}, ${mappedUser.updated_at})
            RETURNING id
          `;
          
          const newUserId = newUser.id;
          userMapping.set(user.id, newUserId);
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${newUserId}`);

          importedUsers++;
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
          errors++;
        }
      }

      // –ò–º–ø–æ—Ä—Ç –∞–∫—Ü–∏–π
      let importedStocks = 0;
      for (const stock of stocks) {
        try {
          const newUserId = userMapping.get(stock.user_id);
          if (!newUserId) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ü–∏—é –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
            continue;
          }

          await this.targetDb`
            INSERT INTO stocks (user_id, stock_name, progress, created_at, updated_at)
            VALUES (${newUserId}, ${stock.stock_name}, ${stock.progress}, ${stock.created_at}, ${stock.updated_at})
          `;
          importedStocks++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∞–∫—Ü–∏–∏:`, error.message);
        }
      }

      // –ò–º–ø–æ—Ä—Ç –∫–∞–ª—å—è–Ω–æ–≤
      let importedHookahs = 0;
      for (const hookah of hookahs) {
        try {
          const newUserId = userMapping.get(hookah.user_id);
          if (!newUserId) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–ª—å—è–Ω –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
            continue;
          }

          await this.targetDb`
            INSERT INTO free_hookahs (user_id, used, used_at, created_at)
            VALUES (${newUserId}, ${hookah.used}, ${hookah.used_at}, ${hookah.created_at})
          `;
          importedHookahs++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞–ª—å—è–Ω–∞:`, error.message);
        }
      }

      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedUsers}`);
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedUsers}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
      console.log(`üìä –ê–∫—Ü–∏–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedStocks}`);
      console.log(`üéØ –ö–∞–ª—å—è–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedHookahs}`);
      
      return {
        users: { imported: importedUsers, skipped: skippedUsers, errors },
        stocks: { imported: importedStocks },
        hookahs: { imported: importedHookahs }
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  detectDataFormat(data) {
    if (data.users && data.stocks && data.free_hookahs) {
      return 'full_export';
    }
    if (Array.isArray(data) && data.length > 0) {
      if (data[0].user || data[0].tg_id) {
        return 'nested_users';
      }
      return 'users_array';
    }
    if (data.tg_id || data.first_name) {
      return 'single_user';
    }
    return 'unknown';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  mapUserData(user) {
    try {
      // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
      const tgId = user.tg_id || user.telegram_id || user.user_id || user.id;
      const firstName = user.first_name || user.firstName || user.name || user.firstname;
      const lastName = user.last_name || user.lastName || user.surname || user.lastname;
      const phone = user.phone || user.phone_number || user.telephone;
      const username = user.username || user.telegram_username || user.tg_username;

      if (!tgId || !firstName || !lastName || !phone) {
        console.log(`‚ö†Ô∏è  –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, user);
        return null;
      }

      return {
        tg_id: parseInt(tgId),
        first_name: String(firstName).trim(),
        last_name: String(lastName).trim(),
        phone: String(phone).trim(),
        username: username ? String(username).trim() : null,
        created_at: user.created_at || user.createdAt || new Date(),
        updated_at: user.updated_at || user.updatedAt || new Date()
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      return null;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
   */
  parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        result.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    
    result.push(current.trim());
    return result;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
   */
  async createBackup() {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º...');
      
      const { DataExporter } = require('./export-all-data.js');
      const exporter = new DataExporter();
      
      const data = await exporter.exportAllData();
      const backupFilename = `backup-before-old-bot-import-${new Date().toISOString().split('T')[0]}.json`;
      
      fs.writeFileSync(backupFilename, JSON.stringify(data, null, 2));
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFilename}`);
      
      return backupFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
      throw error;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const filename = process.argv[3];
  const importer = new OldBotImporter();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await importer.checkConnections();

    switch (command) {
      case 'json':
        if (!filename) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É');
          process.exit(1);
        }
        await importer.createBackup();
        await importer.importFromJSONFile(filename);
        break;
        
      case 'csv':
        if (!filename) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É');
          process.exit(1);
        }
        await importer.createBackup();
        await importer.importFromCSVFile(filename);
        break;
        
      case 'database':
        await importer.createBackup();
        await importer.importFromOldDatabase();
        break;
        
      case 'backup':
        await importer.createBackup();
        break;
        
      case 'help':
      default:
        console.log(`
üì• –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node import-from-old-bot.js <command> [filename]

–ö–æ–º–∞–Ω–¥—ã:
  json <file>      - –ò–º–ø–æ—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞
  csv <file>       - –ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
  database         - –ò–º–ø–æ—Ä—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  backup           - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  help             - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TARGET_DATABASE_URL  - URL —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  OLD_DATABASE_URL     - URL —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è database –∫–æ–º–∞–Ω–¥—ã)

–ü—Ä–∏–º–µ—Ä—ã:
  # –ò–º–ø–æ—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞
  node import-from-old-bot.js json old-bot-data.json
  
  # –ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
  node import-from-old-bot.js csv old-users.csv
  
  # –ò–º–ø–æ—Ä—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  OLD_DATABASE_URL="—Å—Ç–∞—Ä–∞—è_–±–∞–∑–∞" node import-from-old-bot.js database
  
  # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  node import-from-old-bot.js backup

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã JSON:
  - –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {users: [], stocks: [], free_hookahs: []}
  - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: [{tg_id, first_name, ...}, ...]
  - –í–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [{user: {...}, stocks: [...], ...}, ...]
  - –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id, first_name, ...}

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
  - tg_id, telegram_id, user_id, id
  - first_name, firstName, name, firstname
  - last_name, lastName, surname, lastname
  - phone, phone_number, telephone
  - username, telegram_username, tg_username
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = OldBotImporter;
