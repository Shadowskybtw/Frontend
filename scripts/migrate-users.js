#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç –≤ –Ω–æ–≤—É—é
 */

const { neon } = require('@neondatabase/serverless');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SOURCE_DB_URL = process.env.SOURCE_DATABASE_URL || process.env.DATABASE_URL;
const TARGET_DB_URL = process.env.TARGET_DATABASE_URL || process.env.DATABASE_URL;
const EXPORT_FILE = process.env.EXPORT_FILE || './users-export.json';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
const sourceDb = SOURCE_DB_URL ? neon(SOURCE_DB_URL) : null;
const targetDb = TARGET_DB_URL ? neon(TARGET_DB_URL) : null;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
const User = {
  id: 'number',
  tg_id: 'number', 
  first_name: 'string',
  last_name: 'string',
  phone: 'string',
  username: 'string|null',
  created_at: 'Date',
  updated_at: 'Date'
};

const Stock = {
  id: 'number',
  user_id: 'number',
  stock_name: 'string',
  progress: 'number',
  created_at: 'Date',
  updated_at: 'Date'
};

const FreeHookah = {
  id: 'number',
  user_id: 'number',
  used: 'boolean',
  used_at: 'Date|null',
  created_at: 'Date'
};

class UserMigrator {
  constructor() {
    this.sourceDb = sourceDb;
    this.targetDb = targetDb;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async exportUsers() {
    if (!this.sourceDb) {
      throw new Error('Source database not configured');
    }

    console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.sourceDb`
        SELECT * FROM users ORDER BY created_at ASC
      `;
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const fullData = [];
      
      for (const user of users) {
        console.log(`üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} ${user.last_name} (ID: ${user.tg_id})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const stocks = await this.sourceDb`
          SELECT * FROM stocks WHERE user_id = ${user.id} ORDER BY created_at ASC
        `;
        
        // –ü–æ–ª—É—á–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const freeHookahs = await this.sourceDb`
          SELECT * FROM free_hookahs WHERE user_id = ${user.id} ORDER BY created_at ASC
        `;
        
        fullData.push({
          user,
          stocks,
          freeHookahs
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      const exportData = {
        exported_at: new Date().toISOString(),
        total_users: users.length,
        data: fullData
      };

      fs.writeFileSync(EXPORT_FILE, JSON.stringify(exportData, null, 2));
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: ${EXPORT_FILE}`);
      
      return exportData;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      throw error;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async importUsers(importFile = EXPORT_FILE) {
    if (!this.targetDb) {
      throw new Error('Target database not configured');
    }

    if (!fs.existsSync(importFile)) {
      throw new Error(`Import file not found: ${importFile}`);
    }

    console.log('üîÑ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      const importData = JSON.parse(fs.readFileSync(importFile, 'utf8'));
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${importData.total_users}`);

      let imported = 0;
      let skipped = 0;
      let errors = 0;

      for (const item of importData.data) {
        const { user, stocks, freeHookahs } = item;
        
        try {
          console.log(`üë§ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} ${user.last_name} (TG ID: ${user.tg_id})`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existingUser = await this.targetDb`
            SELECT id FROM users WHERE tg_id = ${user.tg_id} LIMIT 1
          `;
          
          if (existingUser.length > 0) {
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            skipped++;
            continue;
          }

          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const [newUser] = await this.targetDb`
            INSERT INTO users (tg_id, first_name, last_name, phone, username, created_at, updated_at)
            VALUES (${user.tg_id}, ${user.first_name}, ${user.last_name}, ${user.phone}, ${user.username}, ${user.created_at}, ${user.updated_at})
            RETURNING id
          `;
          
          const userId = newUser.id;
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${userId}`);

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏
          for (const stock of stocks) {
            await this.targetDb`
              INSERT INTO stocks (user_id, stock_name, progress, created_at, updated_at)
              VALUES (${userId}, ${stock.stock_name}, ${stock.progress}, ${stock.created_at}, ${stock.updated_at})
            `;
          }
          console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ü–∏–π: ${stocks.length}`);

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã
          for (const hookah of freeHookahs) {
            await this.targetDb`
              INSERT INTO free_hookahs (user_id, used, used_at, created_at)
              VALUES (${userId}, ${hookah.used}, ${hookah.used_at}, ${hookah.created_at})
            `;
          }
          console.log(`üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–ª—å—è–Ω–æ–≤: ${freeHookahs.length}`);

          imported++;
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.tg_id}:`, error.message);
          errors++;
        }
      }

      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`);
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async createBackup() {
    const backupFile = `./backup-${new Date().toISOString().split('T')[0]}.json`;
    console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Ñ–∞–π–ª: ${backupFile}`);
    
    const data = await this.exportUsers();
    fs.writeFileSync(backupFile, JSON.stringify(data, null, 2));
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
    
    return backupFile;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
   */
  async checkConnections() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
    
    if (this.sourceDb) {
      try {
        await this.sourceDb`SELECT 1`;
        console.log('‚úÖ Source database: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
      } catch (error) {
        console.log('‚ùå Source database: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        throw error;
      }
    } else {
      console.log('‚ö†Ô∏è  Source database: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }
    
    if (this.targetDb) {
      try {
        await this.targetDb`SELECT 1`;
        console.log('‚úÖ Target database: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
      } catch (error) {
        console.log('‚ùå Target database: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        throw error;
      }
    } else {
      console.log('‚ö†Ô∏è  Target database: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async showStats() {
    if (!this.sourceDb) {
      console.log('‚ùå Source database –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
      return;
    }

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    try {
      const [userCount] = await this.sourceDb`SELECT COUNT(*) as count FROM users`;
      const [stockCount] = await this.sourceDb`SELECT COUNT(*) as count FROM stocks`;
      const [hookahCount] = await this.sourceDb`SELECT COUNT(*) as count FROM free_hookahs`;
      
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount.count}`);
      console.log(`üìä –ê–∫—Ü–∏–π: ${stockCount.count}`);
      console.log(`üéØ –ö–∞–ª—å—è–Ω–æ–≤: ${hookahCount.count}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const migrator = new UserMigrator();

  try {
    switch (command) {
      case 'export':
        await migrator.checkConnections();
        await migrator.exportUsers();
        break;
        
      case 'import':
        await migrator.checkConnections();
        await migrator.importUsers();
        break;
        
      case 'backup':
        await migrator.checkConnections();
        await migrator.createBackup();
        break;
        
      case 'stats':
        await migrator.showStats();
        break;
        
      case 'help':
      default:
        console.log(`
üîÑ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node migrate-users.js <command>

–ö–æ–º–∞–Ω–¥—ã:
  export    - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª
  import    - –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞
  backup    - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  stats     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  SOURCE_DATABASE_URL  - URL –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: DATABASE_URL)
  TARGET_DATABASE_URL  - URL —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: DATABASE_URL)
  EXPORT_FILE          - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./users-export.json)

–ü—Ä–∏–º–µ—Ä—ã:
  # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  node migrate-users.js export
  
  # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  node migrate-users.js import
  
  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  node migrate-users.js backup
  
  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  node migrate-users.js stats
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = UserMigrator;

