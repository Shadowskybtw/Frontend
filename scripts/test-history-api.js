const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testHistoryAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API
    const testTgId = 937011437; // –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω
    
    console.log('üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/history/{tgId}...');
    
    // –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
    console.log('üîç –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è');
    const response1 = await fetch(`http://localhost:3000/api/history/${testTgId}?limit=10`);
    
    if (response1.ok) {
      const data1 = await response1.json();
      console.log('‚úÖ –û–±—ã—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìä –û—Ç–≤–µ—Ç:', {
        success: data1.success,
        itemsCount: data1.items?.length || 0,
        total: data1.total,
        hasMore: data1.hasMore
      });
      
      if (data1.items && data1.items.length > 0) {
        console.log('üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', {
          id: data1.items[0].id,
          hookah_type: data1.items[0].hookah_type,
          created_at: data1.items[0].created_at
        });
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—ã—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏:', response1.status, response1.statusText);
      const errorText = await response1.text();
      console.log('üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
    }
    
    // –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏
    console.log('üîç –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏');
    const response2 = await fetch(`http://localhost:3000/api/history/${testTgId}?withReviews=true&limit=10`);
    
    if (response2.ok) {
      const data2 = await response2.json();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìä –û—Ç–≤–µ—Ç:', {
        success: data2.success,
        itemsCount: data2.items?.length || 0,
        historyCount: data2.history?.length || 0,
        total: data2.total
      });
      
      if (data2.history && data2.history.length > 0) {
        console.log('üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Å –æ—Ç–∑—ã–≤–æ–º:', {
          id: data2.history[0].id,
          hookah_type: data2.history[0].hookah_type,
          created_at: data2.history[0].created_at,
          hasReview: !!data2.history[0].review
        });
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å –æ—Ç–∑—ã–≤–∞–º–∏:', response2.status, response2.statusText);
      const errorText = await response2.text();
      console.log('üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
    }
    
    // –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    console.log('üîç –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é');
    const response3 = await fetch(`http://localhost:3000/api/history/${testTgId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        hookah_type: 'regular',
        slot_number: 1
      })
    });
    
    if (response3.ok) {
      const data3 = await response3.json();
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìä –û—Ç–≤–µ—Ç:', {
        success: data3.success,
        message: data3.message,
        historyId: data3.history?.id
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', response3.status, response3.statusText);
      const errorText = await response3.text();
      console.log('üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
    }
    
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤:', error);
  }
}

testHistoryAPI();
