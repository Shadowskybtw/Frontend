const { PrismaClient } = require('@prisma/client');
const Database = require('better-sqlite3');

async function migrateDataToBigInt() {
  try {
    console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BigInt —Ñ–æ—Ä–º–∞—Ç...');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (backup)
    const backupDb = new Database('./prisma/hookah.db.backup');
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ
    const prisma = new PrismaClient();
    await prisma.$connect();
    console.log('‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = backupDb.prepare('SELECT * FROM users').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`);
    
    for (const user of users) {
      try {
        await prisma.user.create({
          data: {
            tg_id: BigInt(user.tg_id),
            first_name: user.first_name,
            last_name: user.last_name,
            phone: user.phone,
            username: user.username,
            created_at: new Date(user.created_at),
            updated_at: new Date(user.updated_at),
            is_admin: Boolean(user.is_admin),
            total_purchases: user.total_purchases || 0,
            total_regular_purchases: user.total_regular_purchases || 0,
            total_free_purchases: user.total_free_purchases || 0
          }
        });
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} ${user.last_name} (TG: ${user.tg_id}) –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} ${user.last_name} (TG: ${user.tg_id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.first_name} ${user.last_name}:`, error.message);
        }
      }
    }
    
    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º stocks
    console.log('\nüì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º stocks...');
    
    const stocks = backupDb.prepare('SELECT * FROM stocks').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${stocks.length} stocks –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`);
    
    for (const stock of stocks) {
      try {
        await prisma.stock.create({
          data: {
            user_id: stock.user_id,
            stock_name: stock.stock_name,
            progress: stock.progress,
            promotion_completed: Boolean(stock.promotion_completed),
            created_at: new Date(stock.created_at),
            updated_at: new Date(stock.updated_at)
          }
        });
        console.log(`‚úÖ Stock "${stock.stock_name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${stock.user_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ stock "${stock.stock_name}":`, error.message);
      }
    }
    
    // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º hookah_history
    console.log('\nüìù –ú–∏–≥—Ä–∏—Ä—É–µ–º hookah_history...');
    
    const history = backupDb.prepare('SELECT * FROM hookah_history').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${history.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`);
    
    for (const record of history) {
      try {
        await prisma.hookahHistory.create({
          data: {
            user_id: record.user_id,
            hookah_type: record.hookah_type,
            slot_number: record.slot_number,
            created_at: record.created_at ? new Date(record.created_at) : null
          }
        });
        console.log(`‚úÖ –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ ${record.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${record.user_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ ${record.id}:`, error.message);
      }
    }
    
    // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º free_hookahs
    console.log('\nüéÅ –ú–∏–≥—Ä–∏—Ä—É–µ–º free_hookahs...');
    
    const freeHookahs = backupDb.prepare('SELECT * FROM free_hookahs').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${freeHookahs.length} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`);
    
    for (const hookah of freeHookahs) {
      try {
        await prisma.freeHookah.create({
          data: {
            user_id: hookah.user_id,
            used: Boolean(hookah.used),
            used_at: hookah.used_at ? new Date(hookah.used_at) : null,
            created_at: new Date(hookah.created_at)
          }
        });
        console.log(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω ${hookah.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${hookah.user_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞ ${hookah.id}:`, error.message);
      }
    }
    
    // 5. –ú–∏–≥—Ä–∏—Ä—É–µ–º hookah_reviews
    console.log('\n‚≠ê –ú–∏–≥—Ä–∏—Ä—É–µ–º hookah_reviews...');
    
    const reviews = backupDb.prepare('SELECT * FROM hookah_reviews').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`);
    
    for (const review of reviews) {
      try {
        await prisma.hookahReview.create({
          data: {
            user_id: review.user_id,
            hookah_id: review.hookah_id,
            rating: review.rating,
            review_text: review.review_text,
            created_at: new Date(review.created_at)
          }
        });
        console.log(`‚úÖ –û—Ç–∑—ã–≤ ${review.id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${review.user_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ ${review.id}:`, error.message);
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    backupDb.close();
    await prisma.$disconnect();
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

migrateDataToBigInt();
