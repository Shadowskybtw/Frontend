const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testAllAPIs() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API endpoints...');
    
    const baseUrl = 'http://localhost:3000';
    const tgId = 937011437; // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id: ${tgId}`);
    
    // 1. –¢–µ—Å—Ç API webapp/init
    console.log('\nüì° –¢–µ—Å—Ç 1: API webapp/init');
    try {
      const initResponse = await fetch(`${baseUrl}/api/webapp/init`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${initResponse.status} ${initResponse.statusText}`);
      
      if (initResponse.ok) {
        const initData = await initResponse.json();
        console.log('   ‚úÖ Init API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   üìä –î–∞–Ω–Ω—ã–µ:', {
          success: initData.success,
          user: initData.user ? {
            id: initData.user.id,
            first_name: initData.user.first_name,
            last_name: initData.user.last_name,
            username: initData.user.username
          } : null
        });
      } else {
        const errorText = await initResponse.text();
        console.log('   ‚ùå Init API –æ—à–∏–±–∫–∞:', errorText);
      }
    } catch (error) {
      console.log('   ‚ùå Init API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
    }
    
    // 2. –¢–µ—Å—Ç API stocks
    console.log('\nüì¶ –¢–µ—Å—Ç 2: API stocks');
    try {
      const stocksResponse = await fetch(`${baseUrl}/api/stocks/${tgId}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${stocksResponse.status} ${stocksResponse.statusText}`);
      
      if (stocksResponse.ok) {
        const stocksData = await stocksResponse.json();
        console.log('   ‚úÖ Stocks API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   üìä –î–∞–Ω–Ω—ã–µ:', {
          success: stocksData.success,
          stocksCount: stocksData.stocks?.length || 0
        });
        
        if (stocksData.stocks && stocksData.stocks.length > 0) {
          console.log('   üìã –ü–µ—Ä–≤—ã–π stock:', {
            id: stocksData.stocks[0].id,
            name: stocksData.stocks[0].stock_name,
            progress: stocksData.stocks[0].progress
          });
        }
      } else {
        const errorText = await stocksResponse.text();
        console.log('   ‚ùå Stocks API –æ—à–∏–±–∫–∞:', errorText);
      }
    } catch (error) {
      console.log('   ‚ùå Stocks API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
    }
    
    // 3. –¢–µ—Å—Ç API history
    console.log('\nüìù –¢–µ—Å—Ç 3: API history');
    try {
      const historyResponse = await fetch(`${baseUrl}/api/history/${tgId}?withReviews=true&limit=50&offset=0`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${historyResponse.status} ${historyResponse.statusText}`);
      
      if (historyResponse.ok) {
        const historyData = await historyResponse.json();
        console.log('   ‚úÖ History API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   üìä –î–∞–Ω–Ω—ã–µ:', {
          success: historyData.success,
          itemsCount: historyData.items?.length || 0,
          historyCount: historyData.history?.length || 0,
          total: historyData.total
        });
        
        if (historyData.history && historyData.history.length > 0) {
          console.log('   üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏:', {
            id: historyData.history[0].id,
            type: historyData.history[0].hookah_type,
            created_at: historyData.history[0].created_at
          });
        }
      } else {
        const errorText = await historyResponse.text();
        console.log('   ‚ùå History API –æ—à–∏–±–∫–∞:', errorText);
      }
    } catch (error) {
      console.log('   ‚ùå History API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
    }
    
    // 4. –¢–µ—Å—Ç API free-hookahs
    console.log('\nüéÅ –¢–µ—Å—Ç 4: API free-hookahs');
    try {
      const freeHookahsResponse = await fetch(`${baseUrl}/api/free-hookahs/${tgId}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${freeHookahsResponse.status} ${freeHookahsResponse.statusText}`);
      
      if (freeHookahsResponse.ok) {
        const freeHookahsData = await freeHookahsResponse.json();
        console.log('   ‚úÖ Free hookahs API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   üìä –î–∞–Ω–Ω—ã–µ:', {
          success: freeHookahsData.success,
          hookahsCount: freeHookahsData.hookahs?.length || 0,
          unusedCount: freeHookahsData.unusedCount,
          totalCount: freeHookahsData.totalCount
        });
      } else {
        const errorText = await freeHookahsResponse.text();
        console.log('   ‚ùå Free hookahs API –æ—à–∏–±–∫–∞:', errorText);
      }
    } catch (error) {
      console.log('   ‚ùå Free hookahs API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
    }
    
    // 5. –¢–µ—Å—Ç API admin
    console.log('\nüëë –¢–µ—Å—Ç 5: API admin');
    try {
      const adminResponse = await fetch(`${baseUrl}/api/admin?tg_id=${tgId}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${adminResponse.status} ${adminResponse.statusText}`);
      
      if (adminResponse.ok) {
        const adminData = await adminResponse.json();
        console.log('   ‚úÖ Admin API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   üìä –î–∞–Ω–Ω—ã–µ:', {
          success: adminData.success,
          is_admin: adminData.is_admin
        });
      } else {
        const errorText = await adminResponse.text();
        console.log('   ‚ùå Admin API –æ—à–∏–±–∫–∞:', errorText);
      }
    } catch (error) {
      console.log('   ‚ùå Admin API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error.message);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
  }
}

testAllAPIs();
