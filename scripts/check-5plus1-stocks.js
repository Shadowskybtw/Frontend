const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function check5Plus1Stocks() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º stocks —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "5+1 –∫–∞–ª—å—è–Ω"...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ò—â–µ–º –≤—Å–µ stocks —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "5+1 –∫–∞–ª—å—è–Ω"
    const stocks5Plus1 = await prisma.stock.findMany({
      where: { stock_name: '5+1 –∫–∞–ª—å—è–Ω' },
      include: {
        user: {
          select: {
            first_name: true,
            last_name: true,
            tg_id: true
          }
        }
      }
    });
    
    console.log(`\nüì¶ Stocks —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "5+1 –∫–∞–ª—å—è–Ω" (${stocks5Plus1.length} –∑–∞–ø–∏—Å–µ–π):`);
    stocks5Plus1.forEach((stock, index) => {
      console.log(`   ${index + 1}. ID: ${stock.id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${stock.user.first_name} ${stock.user.last_name} (TG: ${stock.user.tg_id}), –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stock.progress}%`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id = 937011437
    const user = await prisma.user.findUnique({
      where: { tg_id: 937011437 }
    });
    
    if (user) {
      console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (ID: ${user.id})`);
      
      // –ò—â–µ–º stock "5+1 –∫–∞–ª—å—è–Ω" —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userStock5Plus1 = await prisma.stock.findFirst({
        where: { 
          user_id: user.id,
          stock_name: '5+1 –∫–∞–ª—å—è–Ω'
        }
      });
      
      if (userStock5Plus1) {
        console.log(`‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å stock "5+1 –∫–∞–ª—å—è–Ω": ID ${userStock5Plus1.id}, –ü—Ä–æ–≥—Ä–µ—Å—Å: ${userStock5Plus1.progress}%`);
      } else {
        console.log(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ stock "5+1 –∫–∞–ª—å—è–Ω"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ stock —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 80%
        const stockWithProgress = await prisma.stock.findFirst({
          where: { 
            user_id: user.id,
            progress: 80
          }
        });
        
        if (stockWithProgress) {
          console.log(`üîç –ù–∞–π–¥–µ–Ω stock —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 80%: ID ${stockWithProgress.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${stockWithProgress.stock_name}"`);
        } else {
          console.log(`‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç stock —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 80%`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ stocks –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const allUserStocks = await prisma.stock.findMany({
          where: { user_id: user.id }
        });
        
        console.log(`\nüìã –í—Å–µ stocks –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
        allUserStocks.forEach((stock, index) => {
          console.log(`   ${index + 1}. ID: ${stock.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${stock.stock_name}", –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stock.progress}%`);
        });
      }
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ stocks:', error);
  } finally {
    await prisma.$disconnect();
  }
}

check5Plus1Stocks();
