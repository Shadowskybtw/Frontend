const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDateFormats() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('\nüìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users...');
    
    const dateFormats = await prisma.$queryRaw`
      SELECT DISTINCT 
        substr(created_at, 1, 20) as created_at_sample,
        substr(updated_at, 1, 20) as updated_at_sample,
        COUNT(*) as count
      FROM users 
      GROUP BY substr(created_at, 1, 20), substr(updated_at, 1, 20)
      ORDER BY count DESC
      LIMIT 10
    `;
    
    console.log('–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
    dateFormats.forEach((format, index) => {
      console.log(`   ${index + 1}. created_at: "${format.created_at_sample}", updated_at: "${format.updated_at_sample}", count: ${format.count}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
    const samples = await prisma.$queryRaw`
      SELECT id, first_name, last_name, created_at, updated_at
      FROM users 
      ORDER BY id DESC
      LIMIT 5
    `;
    
    samples.forEach((user, index) => {
      console.log(`   ${index + 1}. ID: ${user.id}, –ò–º—è: ${user.first_name} ${user.last_name}`);
      console.log(`      created_at: "${user.created_at}" (—Ç–∏–ø: ${typeof user.created_at})`);
      console.log(`      updated_at: "${user.updated_at}" (—Ç–∏–ø: ${typeof user.updated_at})`);
    });
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDateFormats();
