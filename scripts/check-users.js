#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { neon } = require('@neondatabase/serverless');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const db = neon(DATABASE_URL);

class UserManager {
  constructor() {
    this.db = db;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkConnection() {
    try {
      await this.db`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getStats() {
    try {
      const [userStats] = await this.db`
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN created_at >= NOW() - INTERVAL '7 days' THEN 1 END) as users_last_7_days,
          COUNT(CASE WHEN created_at >= NOW() - INTERVAL '30 days' THEN 1 END) as users_last_30_days
        FROM users
      `;

      const [stockStats] = await this.db`
        SELECT 
          COUNT(*) as total_stocks,
          AVG(progress) as avg_progress,
          COUNT(CASE WHEN progress = 100 THEN 1 END) as completed_stocks
        FROM stocks
      `;

      const [hookahStats] = await this.db`
        SELECT 
          COUNT(*) as total_hookahs,
          COUNT(CASE WHEN used = true THEN 1 END) as used_hookahs,
          COUNT(CASE WHEN used = false THEN 1 END) as unused_hookahs
        FROM free_hookahs
      `;

      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      console.log(`   –í—Å–µ–≥–æ: ${userStats.total_users}`);
      console.log(`   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: ${userStats.users_last_7_days}`);
      console.log(`   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: ${userStats.users_last_30_days}`);
      
      console.log('\nüìä –ê–∫—Ü–∏–∏:');
      console.log(`   –í—Å–µ–≥–æ: ${stockStats.total_stocks}`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(stockStats.avg_progress || 0)}%`);
      console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stockStats.completed_stocks}`);
      
      console.log('\nüéØ –ö–∞–ª—å—è–Ω—ã:');
      console.log(`   –í—Å–µ–≥–æ: ${hookahStats.total_hookahs}`);
      console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${hookahStats.used_hookahs}`);
      console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${hookahStats.unused_hookahs}`);

      return {
        users: userStats,
        stocks: stockStats,
        hookahs: hookahStats
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async listUsers(limit = 10) {
    try {
      const users = await this.db`
        SELECT 
          id, tg_id, first_name, last_name, phone, username, 
          created_at, updated_at
        FROM users 
        ORDER BY created_at DESC 
        LIMIT ${limit}
      `;

      console.log(`\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
      users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.first_name} ${user.last_name}`);
        console.log(`   TG ID: ${user.tg_id}`);
        console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}`);
        console.log(`   Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
        console.log('');
      });

      return users;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      throw error;
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   */
  async findUserByTgId(tgId) {
    try {
      const users = await this.db`
        SELECT * FROM users WHERE tg_id = ${tgId}
      `;

      if (users.length === 0) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TG ID ${tgId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      const user = users[0];
      console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   TG ID: ${user.tg_id}`);
      console.log(`   –ò–º—è: ${user.first_name} ${user.last_name}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}`);
      console.log(`   Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(user.updated_at).toLocaleString('ru-RU')}`);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const stocks = await this.db`
        SELECT * FROM stocks WHERE user_id = ${user.id} ORDER BY created_at DESC
      `;
      console.log(`\nüìä –ê–∫—Ü–∏–∏ (${stocks.length}):`);
      stocks.forEach(stock => {
        console.log(`   - ${stock.stock_name}: ${stock.progress}%`);
      });

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hookahs = await this.db`
        SELECT * FROM free_hookahs WHERE user_id = ${user.id} ORDER BY created_at DESC
      `;
      console.log(`\nüéØ –ö–∞–ª—å—è–Ω—ã (${hookahs.length}):`);
      hookahs.forEach(hookah => {
        const status = hookah.used ? '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–¥–æ—Å—Ç—É–ø–µ–Ω';
        console.log(`   - ${status} (—Å–æ–∑–¥–∞–Ω: ${new Date(hookah.created_at).toLocaleString('ru-RU')})`);
      });

      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
   */
  async exportToCSV() {
    try {
      const users = await this.db`
        SELECT 
          tg_id, first_name, last_name, phone, username, 
          created_at, updated_at
        FROM users 
        ORDER BY created_at ASC
      `;

      const csvHeader = 'TG ID,–ò–º—è,–§–∞–º–∏–ª–∏—è,–¢–µ–ª–µ—Ñ–æ–Ω,Username,–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n';
      const csvRows = users.map(user => 
        `${user.tg_id},"${user.first_name}","${user.last_name}","${user.phone}","${user.username || ''}","${new Date(user.created_at).toLocaleString('ru-RU')}","${new Date(user.updated_at).toLocaleString('ru-RU')}"`
      ).join('\n');

      const csvContent = csvHeader + csvRows;
      const filename = `users-export-${new Date().toISOString().split('T')[0]}.csv`;
      
      require('fs').writeFileSync(filename, csvContent, 'utf8');
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
      console.log(`üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

      return filename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createTestUser() {
    try {
      const testUser = {
        tg_id: 999999999,
        first_name: 'Test',
        last_name: 'User',
        phone: '+79999999999',
        username: 'testuser'
      };

      const [user] = await this.db`
        INSERT INTO users (tg_id, first_name, last_name, phone, username)
        VALUES (${testUser.tg_id}, ${testUser.first_name}, ${testUser.last_name}, ${testUser.phone}, ${testUser.username})
        RETURNING *
      `;

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
      console.log(`   ID: ${user.id}`);
      console.log(`   TG ID: ${user.tg_id}`);
      console.log(`   –ò–º—è: ${user.first_name} ${user.last_name}`);

      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async deleteTestUser() {
    try {
      const result = await this.db`
        DELETE FROM users WHERE tg_id = 999999999
      `;

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const arg = process.argv[3];
  const manager = new UserManager();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connected = await manager.checkConnection();
    if (!connected) {
      process.exit(1);
    }

    switch (command) {
      case 'stats':
        await manager.getStats();
        break;
        
      case 'list':
        const limit = arg ? parseInt(arg) : 10;
        await manager.listUsers(limit);
        break;
        
      case 'find':
        if (!arg) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          process.exit(1);
        }
        await manager.findUserByTgId(parseInt(arg));
        break;
        
      case 'export':
        await manager.exportToCSV();
        break;
        
      case 'test-create':
        await manager.createTestUser();
        break;
        
      case 'test-delete':
        await manager.deleteTestUser();
        break;
        
      case 'help':
      default:
        console.log(`
üîç –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node check-users.js <command> [argument]

–ö–æ–º–∞–Ω–¥—ã:
  stats           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  list [limit]    - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
  find <tg_id>    - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  export          - –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–∞–π–ª
  test-create     - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  test-delete     - –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  node check-users.js stats
  
  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  node check-users.js list 20
  
  # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  node check-users.js find 123456789
  
  # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
  node check-users.js export
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = UserManager;

