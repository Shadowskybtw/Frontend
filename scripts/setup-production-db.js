const { PrismaClient } = require('@prisma/client');

// –°–æ–∑–¥–∞–µ–º Prisma Client –¥–ª—è PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});

async function setupProductionDatabase() {
  try {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é raw SQL
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –°–æ–∑–¥–∞–µ–º users —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "users" (
        "id" SERIAL PRIMARY KEY,
        "tg_id" INTEGER NOT NULL UNIQUE,
        "first_name" TEXT NOT NULL,
        "last_name" TEXT NOT NULL,
        "phone" TEXT NOT NULL,
        "username" TEXT,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "is_admin" BOOLEAN NOT NULL DEFAULT false,
        "total_purchases" INTEGER NOT NULL DEFAULT 0,
        "total_regular_purchases" INTEGER NOT NULL DEFAULT 0,
        "total_free_purchases" INTEGER NOT NULL DEFAULT 0
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º stocks —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "stocks" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL,
        "stock_name" TEXT NOT NULL,
        "progress" INTEGER NOT NULL DEFAULT 0,
        "promotion_completed" BOOLEAN NOT NULL DEFAULT false,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "stocks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º free_hookahs —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "free_hookahs" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL,
        "used" BOOLEAN NOT NULL DEFAULT false,
        "used_at" TIMESTAMP(3),
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "free_hookahs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º hookah_history —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "hookah_history" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL,
        "hookah_type" TEXT NOT NULL,
        "slot_number" INTEGER,
        "created_at" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "hookah_history_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE NO ACTION
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è hookah_history
    await prisma.$executeRaw`
      CREATE INDEX IF NOT EXISTS "hookah_history_created_at_idx" ON "hookah_history"("created_at");
    `;
    await prisma.$executeRaw`
      CREATE INDEX IF NOT EXISTS "hookah_history_user_id_idx" ON "hookah_history"("user_id");
    `;
    
    // –°–æ–∑–¥–∞–µ–º admins —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "admins" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL UNIQUE,
        "granted_by" INTEGER NOT NULL,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "admins_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "admins_granted_by_fkey" FOREIGN KEY ("granted_by") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º admin_list —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "admin_list" (
        "id" SERIAL PRIMARY KEY,
        "tg_id" INTEGER NOT NULL UNIQUE,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º free_hookah_requests —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "free_hookah_requests" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL,
        "stock_id" INTEGER NOT NULL,
        "status" TEXT NOT NULL DEFAULT 'pending',
        "approved_by" INTEGER,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "free_hookah_requests_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "free_hookah_requests_stock_id_fkey" FOREIGN KEY ("stock_id") REFERENCES "stocks"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "free_hookah_requests_approved_by_fkey" FOREIGN KEY ("approved_by") REFERENCES "admins"("id") ON DELETE SET NULL ON UPDATE CASCADE
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º hookah_reviews —Ç–∞–±–ª–∏—Ü—É
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "hookah_reviews" (
        "id" SERIAL PRIMARY KEY,
        "user_id" INTEGER NOT NULL,
        "hookah_id" INTEGER NOT NULL,
        "rating" INTEGER NOT NULL,
        "review_text" TEXT,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "hookah_reviews_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT "hookah_reviews_user_id_hookah_id_key" UNIQUE ("user_id", "hookah_id")
      );
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
    await prisma.$executeRaw`
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
      END;
      $$ language 'plpgsql';
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è updated_at
    await prisma.$executeRaw`
      CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON "users" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    `;
    await prisma.$executeRaw`
      CREATE TRIGGER update_stocks_updated_at BEFORE UPDATE ON "stocks" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    `;
    await prisma.$executeRaw`
      CREATE TRIGGER update_free_hookah_requests_updated_at BEFORE UPDATE ON "free_hookah_requests" FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    `;
    
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    const tables = await prisma.$queryRaw`
      SELECT table_name FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `;
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables);
    
    console.log('üéâ –ü—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupProductionDatabase();
