const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function create5Plus1Stock() {
  try {
    console.log('üéØ –°–æ–∑–¥–∞–µ–º stock "5+1 –∫–∞–ª—å—è–Ω" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id = 937011437
    const user = await prisma.user.findUnique({
      where: { tg_id: 937011437 }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (ID: ${user.id})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ stock "5+1 –∫–∞–ª—å—è–Ω"
    const existingStock = await prisma.stock.findFirst({
      where: { 
        user_id: user.id,
        stock_name: '5+1 –∫–∞–ª—å—è–Ω'
      }
    });
    
    if (existingStock) {
      console.log(`‚úÖ Stock "5+1 –∫–∞–ª—å—è–Ω" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID ${existingStock.id}, –ü—Ä–æ–≥—Ä–µ—Å—Å: ${existingStock.progress}%`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 80% (4 –∏–∑ 5 —Å–ª–æ—Ç–æ–≤)
      const updatedStock = await prisma.stock.update({
        where: { id: existingStock.id },
        data: { progress: 80 }
      });
      
      console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedStock.progress}%`);
    } else {
      console.log(`üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π stock "5+1 –∫–∞–ª—å—è–Ω"...`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π stock —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 80% (4 –∏–∑ 5 —Å–ª–æ—Ç–æ–≤)
      const newStock = await prisma.stock.create({
        data: {
          user_id: user.id,
          stock_name: '5+1 –∫–∞–ª—å—è–Ω',
          progress: 80,
          promotion_completed: false
        }
      });
      
      console.log(`‚úÖ Stock —Å–æ–∑–¥–∞–Ω: ID ${newStock.id}, –ü—Ä–æ–≥—Ä–µ—Å—Å: ${newStock.progress}%`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ stocks –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allStocks = await prisma.stock.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' }
    });
    
    console.log(`\nüìã –í—Å–µ stocks –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${allStocks.length} –∑–∞–ø–∏—Å–µ–π):`);
    allStocks.forEach((stock, index) => {
      console.log(`   ${index + 1}. ID: ${stock.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${stock.stock_name}", –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stock.progress}%`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stock5Plus1 = allStocks.find(s => s.stock_name === '5+1 –∫–∞–ª—å—è–Ω');
    if (stock5Plus1) {
      const slotsFilled = Math.floor(stock5Plus1.progress / 20);
      const slotsRemaining = 5 - slotsFilled;
      
      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ "5+1 –∫–∞–ª—å—è–Ω":`);
      console.log(`   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${slotsFilled}/5`);
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: ${slotsRemaining}`);
      console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stock5Plus1.progress}%`);
    }
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ stock –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ stock:', error);
  } finally {
    await prisma.$disconnect();
  }
}

create5Plus1Stock();
