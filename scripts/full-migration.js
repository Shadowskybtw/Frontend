const { PrismaClient } = require('@prisma/client');
const Database = require('better-sqlite3');

async function fullMigration() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
  
  const oldDb = new Database('./hookah.db');
  const prisma = new PrismaClient();
  
  try {
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    await prisma.hookahReview.deleteMany();
    await prisma.freeHookahRequest.deleteMany();
    await prisma.hookahHistory.deleteMany();
    await prisma.freeHookah.deleteMany();
    await prisma.stock.deleteMany();
    await prisma.user.deleteMany();
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (guests -> users)
    console.log('üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const guests = oldDb.prepare('SELECT * FROM guests WHERE telegram_id IS NOT NULL').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ—Å—Ç–µ–π: ${guests.length}`);
    
    let usersMigrated = 0;
    for (const guest of guests) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TG ID –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ INT
        if (guest.telegram_id > 2147483647) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º TG ID: ${guest.telegram_id}`);
          continue;
        }
        
               // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ ISO —Å—Ç—Ä–æ–∫—É
               let createdAt;
               if (typeof guest.created_at === 'string' && guest.created_at.includes('-')) {
                 // –§–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS.microseconds
                 createdAt = new Date(guest.created_at).toISOString();
               } else {
                 // Timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                 createdAt = new Date(parseInt(guest.created_at)).toISOString();
               }
        
        const user = await prisma.user.create({
          data: {
            tg_id: guest.telegram_id,
            first_name: guest.first_name || 'Unknown',
            last_name: guest.last_name || 'User',
            phone: guest.phone || '+0000000000',
            username: null,
            is_admin: false,
            total_purchases: guest.total_purchases || 0,
            total_regular_purchases: 0,
            total_free_purchases: 0,
            created_at: createdAt,
            updated_at: createdAt
          }
        });
        
        usersMigrated++;
        if (usersMigrated % 50 === 0) {
          console.log(`   üìà –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersMigrated}`);
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${guest.telegram_id}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersMigrated}`);
    
    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ (purchases -> stocks + hookah_history)
    console.log('üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏...');
    
    const purchases = oldDb.prepare('SELECT * FROM purchases').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${purchases.length}`);
    
    let stocksMigrated = 0;
    let historyMigrated = 0;
    
    for (const purchase of purchases) {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å null guest_id
        if (!purchase.guest_id) {
          continue;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id
        const user = await prisma.user.findFirst({
          where: {
            tg_id: purchase.guest_id
          }
        });
        
        if (user) {
               // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ ISO —Å—Ç—Ä–æ–∫—É
               let purchaseCreatedAt;
               if (typeof purchase.created_at === 'string' && purchase.created_at.includes('-')) {
                 purchaseCreatedAt = new Date(purchase.created_at).toISOString();
               } else {
                 purchaseCreatedAt = new Date(parseInt(purchase.created_at)).toISOString();
               }
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤
          await prisma.hookahHistory.create({
            data: {
              user_id: user.id,
              hookah_type: purchase.is_free ? 'free' : 'regular',
              created_at: purchaseCreatedAt
            }
          });
          historyMigrated++;
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, —Å–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
          if (purchase.rating) {
            await prisma.hookahReview.create({
              data: {
                user_id: user.id,
                hookah_id: historyMigrated, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ hookah_id
                rating: purchase.rating,
                review_text: purchase.rating_comment || null
              }
            });
          }
        }
        
        if ((stocksMigrated + historyMigrated) % 100 === 0) {
          console.log(`   üìà –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${stocksMigrated + historyMigrated}`);
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ ${purchase.id}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${historyMigrated}`);
    
    // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (admins -> admin_list)
    console.log('üëë –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
    
    const admins = oldDb.prepare('SELECT * FROM admins').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}`);
    
    let adminsMigrated = 0;
    for (const admin of admins) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TG ID –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ INT
        if (admin.telegram_id > 2147483647) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –±–æ–ª—å—à–∏–º TG ID: ${admin.telegram_id}`);
          continue;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existing = await prisma.adminList.findUnique({
          where: { tg_id: admin.telegram_id }
        });
        
        if (existing) {
          console.log(`   ‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
               // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ ISO —Å—Ç—Ä–æ–∫—É
               let adminCreatedAt;
               if (typeof admin.created_at === 'string' && admin.created_at.includes('-')) {
                 adminCreatedAt = new Date(admin.created_at).toISOString();
               } else {
                 adminCreatedAt = new Date(parseInt(admin.created_at)).toISOString();
               }
        
        await prisma.adminList.create({
          data: {
            tg_id: admin.telegram_id,
            created_at: adminCreatedAt
          }
        });
        adminsMigrated++;
      } catch (error) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.telegram_id}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminsMigrated}`);
    
    // 4. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã...');
    
    const users = await prisma.user.findMany();
    let stocksCreated = 0;
    
    for (const user of users) {
      try {
        await prisma.stock.create({
          data: {
            user_id: user.id,
            stock_name: '5+1 –∫–∞–ª—å—è–Ω',
            progress: 0,
            promotion_completed: false
          }
        });
        stocksCreated++;
      } catch (error) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∞—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∞—Å–æ–≤: ${stocksCreated}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    const userCount = await prisma.user.count();
    const adminCount = await prisma.adminList.count();
    const stockCount = await prisma.stock.count();
    const historyCount = await prisma.hookahHistory.count();
    const reviewCount = await prisma.hookahReview.count();
    
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    console.log(`   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount}`);
    console.log(`   - –ó–∞–ø–∞—Å–æ–≤: ${stockCount}`);
    console.log(`   - –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${historyCount}`);
    console.log(`   - –û—Ç–∑—ã–≤–æ–≤: ${reviewCount}`);
    
    console.log('üéâ –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    oldDb.close();
    await prisma.$disconnect();
  }
}

fullMigration();
