#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ (–∫–∞–ª—å—è–Ω–æ–≤) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
 */

const sqlite3 = require('sqlite3').verbose();
const { neon } = require('@neondatabase/serverless');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const OLD_DB_PATH = process.argv[3] || 'hookah.db';
const TARGET_DATABASE_URL = process.env.TARGET_DATABASE_URL;

if (!TARGET_DATABASE_URL) {
  console.error('‚ùå TARGET_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const targetDb = neon(TARGET_DATABASE_URL);

class TotalPurchasesAnalyzer {
  constructor() {
    this.oldDb = null;
    this.targetDb = targetDb;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async connectToOldDb() {
    return new Promise((resolve, reject) => {
      this.oldDb = new sqlite3.Database(OLD_DB_PATH, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
          reject(err);
        } else {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
          resolve();
        }
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkTargetConnection() {
    try {
      await this.targetDb`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫
   */
  async analyzeTotalPurchases() {
    try {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
      const oldUsers = await this.getOldUsers();
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: ${oldUsers.length}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏
      const allPurchases = await this.getAllPurchases();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫ –≤ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: ${allPurchases.length}`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const purchasesByUser = {};
      allPurchases.forEach(purchase => {
        const tgId = purchase.tg_id;
        if (!purchasesByUser[tgId]) {
          purchasesByUser[tgId] = {
            tg_id: tgId,
            first_name: purchase.first_name,
            last_name: purchase.last_name,
            total_purchases: 0,
            free_purchases: 0,
            regular_purchases: 0
          };
        }
        
        purchasesByUser[tgId].total_purchases++;
        
        if (purchase.is_free === 1) {
          purchasesByUser[tgId].free_purchases++;
        } else {
          purchasesByUser[tgId].regular_purchases++;
        }
      });

      console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:`);
      console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${Object.keys(purchasesByUser).length}`);
      
      const totalPurchases = Object.values(purchasesByUser).reduce((sum, user) => sum + user.total_purchases, 0);
      const totalFreePurchases = Object.values(purchasesByUser).reduce((sum, user) => sum + user.free_purchases, 0);
      const totalRegularPurchases = Object.values(purchasesByUser).reduce((sum, user) => sum + user.regular_purchases, 0);
      
      console.log(`   –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: ${totalPurchases}`);
      console.log(`   –û–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${totalRegularPurchases}`);
      console.log(`   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${totalFreePurchases}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const topUsers = Object.values(purchasesByUser)
        .sort((a, b) => b.total_purchases - a.total_purchases)
        .slice(0, 20);

      console.log(`\nüèÜ –¢–æ–ø 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫:`);
      topUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.first_name} ${user.last_name} (TG: ${user.tg_id})`);
        console.log(`      –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: ${user.total_purchases}`);
        console.log(`      –û–±—ã—á–Ω—ã—Ö: ${user.regular_purchases}, –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${user.free_purchases}`);
        console.log('');
      });

      return purchasesByUser;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–∫—É–ø–æ–∫:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
   */
  async getOldUsers() {
    return new Promise((resolve, reject) => {
      this.oldDb.all(`
        SELECT telegram_id as tg_id, first_name, last_name 
        FROM guests 
        ORDER BY telegram_id
      `, (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
   */
  async getAllPurchases() {
    return new Promise((resolve, reject) => {
      this.oldDb.all(`
        SELECT 
          g.telegram_id as tg_id,
          g.first_name,
          g.last_name,
          p.is_free,
          p.created_at
        FROM purchases p
        JOIN guests g ON p.guest_id = g.id
        ORDER BY p.created_at ASC
      `, (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async updateTargetDatabase(purchasesByUser) {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

      let updatedUsers = 0;
      let errors = 0;

      for (const [tgId, userData] of Object.entries(purchasesByUser)) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
          const existingUser = await this.targetDb`
            SELECT id FROM users WHERE tg_id = ${parseInt(tgId)}
          `;

          if (existingUser.length === 0) {
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.first_name} ${userData.last_name} (TG: ${tgId}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ`);
            continue;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫)
          // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
          console.log(`‚úÖ ${userData.first_name} ${userData.last_name} (TG: ${tgId}):`);
          console.log(`   –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${userData.total_purchases}`);
          console.log(`   –û–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${userData.regular_purchases}`);
          console.log(`   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${userData.free_purchases}`);
          console.log('');

          updatedUsers++;

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tgId}:`, error.message);
          errors++;
        }
      }

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updatedUsers}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  async createReport(purchasesByUser) {
    try {
      const reportData = {
        metadata: {
          generated_at: new Date().toISOString(),
          total_users: Object.keys(purchasesByUser).length,
          total_purchases: Object.values(purchasesByUser).reduce((sum, user) => sum + user.total_purchases, 0),
          total_regular_purchases: Object.values(purchasesByUser).reduce((sum, user) => sum + user.regular_purchases, 0),
          total_free_purchases: Object.values(purchasesByUser).reduce((sum, user) => sum + user.free_purchases, 0)
        },
        users: Object.values(purchasesByUser).sort((a, b) => b.total_purchases - a.total_purchases)
      };

      const filename = `total-purchases-report-${new Date().toISOString().split('T')[0]}.json`;
      require('fs').writeFileSync(filename, JSON.stringify(reportData, null, 2));
      
      console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${filename}`);
      return filename;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
      throw error;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  closeConnection() {
    if (this.oldDb) {
      this.oldDb.close((err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message);
        } else {
          console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
      });
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const arg = process.argv[3];
  const analyzer = new TotalPurchasesAnalyzer();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const targetConnected = await analyzer.checkTargetConnection();
    if (!targetConnected) {
      process.exit(1);
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await analyzer.connectToOldDb();

    switch (command) {
      case 'analyze':
        const purchasesData = await analyzer.analyzeTotalPurchases();
        break;
        
      case 'update':
        const purchasesData2 = await analyzer.analyzeTotalPurchases();
        await analyzer.updateTargetDatabase(purchasesData2);
        break;
        
      case 'report':
        const purchasesData3 = await analyzer.analyzeTotalPurchases();
        await analyzer.createReport(purchasesData3);
        break;
        
      case 'help':
      default:
        console.log(`
üìä –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node analyze-total-purchases.js <command> [old_db_path]

–ö–æ–º–∞–Ω–¥—ã:
  analyze         - –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫
  update          - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
  report          - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TARGET_DATABASE_URL  - URL —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä—ã:
  # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫
  TARGET_DATABASE_URL="–≤–∞—à_url" node analyze-total-purchases.js analyze
  
  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  TARGET_DATABASE_URL="–≤–∞—à_url" node analyze-total-purchases.js update
  
  # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  TARGET_DATABASE_URL="–≤–∞—à_url" node analyze-total-purchases.js report

–õ–æ–≥–∏–∫–∞:
  - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É purchases –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  - –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  - –†–∞–∑–¥–µ–ª—è–µ—Ç –æ–±—ã—á–Ω—ã–µ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
  - –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç—á–µ—Ç—ã
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    analyzer.closeConnection();
  }
}

if (require.main === module) {
  main();
}

module.exports = TotalPurchasesAnalyzer;
