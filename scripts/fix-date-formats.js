const Database = require('better-sqlite3');

const newDb = new Database('./prisma/hookah.db');

async function fixDateFormats() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç...');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('üë• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = newDb.prepare('SELECT id, created_at, updated_at FROM users').all();
    
    const updateUser = newDb.prepare(`
      UPDATE users 
      SET created_at = ?, updated_at = ?
      WHERE id = ?
    `);
    
    for (const user of users) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç
      const createdAt = new Date(user.created_at).toISOString();
      const updatedAt = new Date(user.updated_at).toISOString();
      
      updateUser.run(createdAt, updatedAt, user.id);
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ admin_list
    console.log('üëë –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
    const admins = newDb.prepare('SELECT id, created_at FROM admin_list').all();
    
    const updateAdmin = newDb.prepare(`
      UPDATE admin_list 
      SET created_at = ?
      WHERE id = ?
    `);
    
    for (const admin of admins) {
      const createdAt = new Date(admin.created_at).toISOString();
      updateAdmin.run(createdAt, admin.id);
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ hookah_history
    console.log('üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏...');
    const history = newDb.prepare('SELECT id, created_at FROM hookah_history').all();
    
    const updateHistory = newDb.prepare(`
      UPDATE hookah_history 
      SET created_at = ?
      WHERE id = ?
    `);
    
    for (const record of history) {
      const createdAt = new Date(record.created_at).toISOString();
      updateHistory.run(createdAt, record.id);
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${history.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ stocks
    console.log('üì¶ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –∑–∞–ø–∞—Å–æ–≤...');
    const stocks = newDb.prepare('SELECT id, created_at, updated_at FROM stocks').all();
    
    const updateStock = newDb.prepare(`
      UPDATE stocks 
      SET created_at = ?, updated_at = ?
      WHERE id = ?
    `);
    
    for (const stock of stocks) {
      const createdAt = new Date(stock.created_at).toISOString();
      const updatedAt = new Date(stock.updated_at).toISOString();
      updateStock.run(createdAt, updatedAt, stock.id);
    }
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${stocks.length} –∑–∞–ø–∞—Å–æ–≤`);
    
    console.log('üéâ –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç:', error);
  } finally {
    newDb.close();
  }
}

fixDateFormats();
