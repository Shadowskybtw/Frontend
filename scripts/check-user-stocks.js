const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkUserStocks() {
  try {
    console.log('๐ ะัะพะฒะตััะตะผ stocks ะฟะพะปัะทะพะฒะฐัะตะปั...');
    
    // ะัะพะฒะตััะตะผ ะฟะพะดะบะปััะตะฝะธะต
    await prisma.$connect();
    console.log('โ ะะพะดะบะปััะตะฝะธะต ะบ ะฑะฐะทะต ะดะฐะฝะฝัั ัััะฐะฝะพะฒะปะตะฝะพ');
    
    // ะะพะปััะฐะตะผ ะฟะพะปัะทะพะฒะฐัะตะปั ั tg_id = 937011437
    const user = await prisma.user.findUnique({
      where: { tg_id: 937011437 }
    });
    
    if (!user) {
      console.log('โ ะะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐะนะดะตะฝ');
      return;
    }
    
    console.log(`๐ค ะะพะปัะทะพะฒะฐัะตะปั: ${user.first_name} ${user.last_name} (ID: ${user.id})`);
    
    // ะะพะปััะฐะตะผ ะฒัะต stocks ะฟะพะปัะทะพะฒะฐัะตะปั
    const stocks = await prisma.stock.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' }
    });
    
    console.log(`\n๐ฆ Stocks ะฟะพะปัะทะพะฒะฐัะตะปั (${stocks.length} ะทะฐะฟะธัะตะน):`);
    stocks.forEach((stock, index) => {
      console.log(`   ${index + 1}. ID: ${stock.id}, ะะฐะทะฒะฐะฝะธะต: "${stock.stock_name}", ะัะพะณัะตัั: ${stock.progress}%, ะะฐะฒะตััะตะฝะพ: ${stock.promotion_completed}`);
    });
    
    // ะัะตะผ stock ั ะฝะฐะทะฒะฐะฝะธะตะผ "5+1 ะบะฐะปััะฝ"
    const targetStock = stocks.find(s => s.stock_name === '5+1 ะบะฐะปััะฝ');
    if (targetStock) {
      console.log(`\nโ ะะฐะนะดะตะฝ stock "5+1 ะบะฐะปััะฝ": ID ${targetStock.id}, ะัะพะณัะตัั: ${targetStock.progress}%`);
    } else {
      console.log(`\nโ Stock "5+1 ะบะฐะปััะฝ" ะฝะต ะฝะฐะนะดะตะฝ`);
      console.log(`   ะะพัััะฟะฝัะต ะฝะฐะทะฒะฐะฝะธั: ${stocks.map(s => `"${s.stock_name}"`).join(', ')}`);
    }
    
    // ะัะพะฒะตััะตะผ ะธััะพัะธั ะบะฐะปััะฝะพะฒ
    const history = await prisma.hookahHistory.findMany({
      where: { user_id: user.id },
      orderBy: { created_at: 'desc' },
      take: 10
    });
    
    console.log(`\n๐ ะััะพัะธั ะบะฐะปััะฝะพะฒ (ะฟะพัะปะตะดะฝะธะต 10 ะทะฐะฟะธัะตะน):`);
    history.forEach((record, index) => {
      console.log(`   ${index + 1}. ID: ${record.id}, ะขะธะฟ: ${record.hookah_type}, ะะฐัะฐ: ${record.created_at}`);
    });
    
    // ะกัะฐัะธััะธะบะฐ ะฟะพ ัะธะฟะฐะผ ะบะฐะปััะฝะพะฒ
    const regularCount = history.filter(h => h.hookah_type === 'regular').length;
    const freeCount = history.filter(h => h.hookah_type === 'free').length;
    
    console.log(`\n๐ ะกัะฐัะธััะธะบะฐ ะบะฐะปััะฝะพะฒ:`);
    console.log(`   ๐ต ะะฑััะฝัะต ะบะฐะปััะฝั: ${regularCount}`);
    console.log(`   ๐ข ะะตัะฟะปะฐัะฝัะต ะบะฐะปััะฝั: ${freeCount}`);
    console.log(`   ๐ ะัะตะณะพ ะบะฐะปััะฝะพะฒ: ${history.length}`);
    
    console.log('\n๐ ะัะพะฒะตัะบะฐ ะทะฐะฒะตััะตะฝะฐ!');
    
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะฟัะพะฒะตัะบะต stocks:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserStocks();
