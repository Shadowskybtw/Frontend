const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testWebAppFlow() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ WebApp...');
    
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const homeResponse = await fetch('http://localhost:3000/');
    
    if (homeResponse.ok) {
      console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
      const html = await homeResponse.text();
      
      if (html.includes('UserProvider')) {
        console.log('‚úÖ UserProvider –Ω–∞–π–¥–µ–Ω');
      }
      
      if (html.includes('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')) {
        console.log('‚úÖ –¢–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω');
      }
    } else {
      console.log('‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', homeResponse.status);
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const existingUserResponse = await fetch('http://localhost:3000/api/check-or-register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-telegram-init-data': 'test_init_data'
      },
      body: JSON.stringify({
        tg_id: 937011437,
        firstName: '–ù–∏–∫–æ–ª–∞–π',
        lastName: '–ú–∏—à–∏–Ω',
        username: null
      })
    });
    
    if (existingUserResponse.ok) {
      const existingUserData = await existingUserResponse.json();
      console.log('‚úÖ API –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', existingUserData.success);
      
      if (existingUserData.success && !existingUserData.isNewUser) {
        console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingUserData.user.first_name, existingUserData.user.last_name);
      }
    } else {
      console.log('‚ùå API –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', existingUserResponse.status);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const newUserResponse = await fetch('http://localhost:3000/api/check-or-register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-telegram-init-data': 'test_init_data'
      },
      body: JSON.stringify({
        tg_id: Math.floor(Math.random() * 1000000000) + 1000000000,
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: 'testuser'
      })
    });
    
    if (newUserResponse.ok) {
      const newUserData = await newUserResponse.json();
      console.log('‚úÖ API –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', newUserData.success);
      
      if (newUserData.success && newUserData.isNewUser) {
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', newUserData.user.first_name, newUserData.user.last_name);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      }
    } else {
      console.log('‚ùå API –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', newUserResponse.status);
    }
    
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

testWebAppFlow();