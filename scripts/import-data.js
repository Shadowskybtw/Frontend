#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
 */

const { neon } = require('@neondatabase/serverless');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const db = neon(DATABASE_URL);

class DataImporter {
  constructor() {
    this.db = db;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkConnection() {
    try {
      await this.db`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
   */
  async importFromFile(filename) {
    try {
      if (!fs.existsSync(filename)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
      }

      console.log(`üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: ${filename}`);
      
      const data = JSON.parse(fs.readFileSync(filename, 'utf8'));
      
      if (!data.users || !Array.isArray(data.users)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${data.users.length}`);
      
      let imported = 0;
      let skipped = 0;
      let errors = 0;

      // –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const user of data.users) {
        try {
          console.log(`üë§ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} ${user.last_name} (TG ID: ${user.tg_id})`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existingUser = await this.db`
            SELECT id FROM users WHERE tg_id = ${user.tg_id} LIMIT 1
          `;
          
          if (existingUser.length > 0) {
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            skipped++;
            continue;
          }

          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const [newUser] = await this.db`
            INSERT INTO users (tg_id, first_name, last_name, phone, username, created_at, updated_at)
            VALUES (${user.tg_id}, ${user.first_name}, ${user.last_name}, ${user.phone}, ${user.username}, ${user.created_at}, ${user.updated_at})
            RETURNING id
          `;
          
          const userId = newUser.id;
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${userId}`);

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (data.stocks) {
            const userStocks = data.stocks.filter(stock => stock.user_id === user.id);
            for (const stock of userStocks) {
              await this.db`
                INSERT INTO stocks (user_id, stock_name, progress, created_at, updated_at)
                VALUES (${userId}, ${stock.stock_name}, ${stock.progress}, ${stock.created_at}, ${stock.updated_at})
              `;
            }
            console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ü–∏–π: ${userStocks.length}`);
          }

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (data.free_hookahs) {
            const userHookahs = data.free_hookahs.filter(hookah => hookah.user_id === user.id);
            for (const hookah of userHookahs) {
              await this.db`
                INSERT INTO free_hookahs (user_id, used, used_at, created_at)
                VALUES (${userId}, ${hookah.used}, ${hookah.used_at}, ${hookah.created_at})
              `;
            }
            console.log(`üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–ª—å—è–Ω–æ–≤: ${userHookahs.length}`);
          }

          imported++;
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.tg_id}:`, error.message);
          errors++;
        }
      }

      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`);
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
      
      return { imported, skipped, errors };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞
   */
  async importUserFromFile(filename) {
    try {
      if (!fs.existsSync(filename)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
      }

      console.log(`üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞: ${filename}`);
      
      const data = JSON.parse(fs.readFileSync(filename, 'utf8'));
      
      if (!data.user) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      const user = data.user;
      console.log(`üë§ –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.first_name} ${user.last_name} (TG ID: ${user.tg_id})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await this.db`
        SELECT id FROM users WHERE tg_id = ${user.tg_id} LIMIT 1
      `;
      
      if (existingUser.length > 0) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return { imported: 0, skipped: 1, errors: 0 };
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [newUser] = await this.db`
        INSERT INTO users (tg_id, first_name, last_name, phone, username, created_at, updated_at)
        VALUES (${user.tg_id}, ${user.first_name}, ${user.last_name}, ${user.phone}, ${user.username}, ${user.created_at}, ${user.updated_at})
        RETURNING id
      `;
      
      const userId = newUser.id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${userId}`);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (data.stocks && Array.isArray(data.stocks)) {
        for (const stock of data.stocks) {
          await this.db`
            INSERT INTO stocks (user_id, stock_name, progress, created_at, updated_at)
            VALUES (${userId}, ${stock.stock_name}, ${stock.progress}, ${stock.created_at}, ${stock.updated_at})
          `;
        }
        console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ü–∏–π: ${data.stocks.length}`);
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª—å—è–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (data.free_hookahs && Array.isArray(data.free_hookahs)) {
        for (const hookah of data.free_hookahs) {
          await this.db`
            INSERT INTO free_hookahs (user_id, used, used_at, created_at)
            VALUES (${userId}, ${hookah.used}, ${hookah.used_at}, ${hookah.created_at})
          `;
        }
        console.log(`üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–ª—å—è–Ω–æ–≤: ${data.free_hookahs.length}`);
      }

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      return { imported: 1, skipped: 0, errors: 0 };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
   */
  async createBackup() {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      
      const { DataExporter } = require('./export-all-data.js');
      const exporter = new DataExporter();
      
      const data = await exporter.exportAllData();
      const backupFilename = `backup-before-import-${new Date().toISOString().split('T')[0]}.json`;
      
      fs.writeFileSync(backupFilename, JSON.stringify(data, null, 2));
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFilename}`);
      
      return backupFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–û–°–¢–û–†–û–ñ–ù–û!)
   */
  async clearDatabase() {
    try {
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!');
      console.log('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ "YES" –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...');
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å readline)
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      return new Promise((resolve, reject) => {
        rl.question('–í–≤–µ–¥–∏—Ç–µ YES –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ', (answer) => {
          rl.close();
          
          if (answer !== 'YES') {
            console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            resolve(false);
            return;
          }

          this.db`
            DELETE FROM free_hookahs;
            DELETE FROM stocks;
            DELETE FROM users;
          `.then(() => {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
            resolve(true);
          }).catch(reject);
        });
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const filename = process.argv[3];
  const importer = new DataImporter();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connected = await importer.checkConnection();
    if (!connected) {
      process.exit(1);
    }

    switch (command) {
      case 'import':
        if (!filename) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
          process.exit(1);
        }
        await importer.importFromFile(filename);
        break;
        
      case 'import-user':
        if (!filename) {
          console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
          process.exit(1);
        }
        await importer.importUserFromFile(filename);
        break;
        
      case 'backup':
        await importer.createBackup();
        break;
        
      case 'clear':
        await importer.clearDatabase();
        break;
        
      case 'help':
      default:
        console.log(`
üì• –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node import-data.js <command> [filename]

–ö–æ–º–∞–Ω–¥—ã:
  import <file>        - –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
  import-user <file>   - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON —Ñ–∞–π–ª–∞
  backup              - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
  clear               - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–û–°–¢–û–†–û–ñ–ù–û!)
  help                - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  node import-data.js import full-export-2025-10-05.json
  
  # –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  node import-data.js import-user user-123456789-export-2025-10-05.json
  
  # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  node import-data.js backup
  
  # –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É (–û–°–¢–û–†–û–ñ–ù–û!)
  node import-data.js clear

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
  - –ü–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–µ–º –∂–µ TG ID –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã
  - –ò–º–ø–æ—Ä—Ç –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = DataImporter;

