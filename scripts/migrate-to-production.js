const { PrismaClient } = require('@prisma/client');

async function migrateToProduction() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ PostgreSQL...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ PostgreSQL
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: process.env.DATABASE_URL || process.env.POSTGRES_URL
      }
    }
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const users = await prisma.user.findMany();
    console.log(`üìä –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ PostgreSQL: ${users.length}`);

    if (users.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1: –¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user1 = await prisma.user.create({
        data: {
          tg_id: BigInt(123456789),
          first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
          last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '+7900123456',
          username: 'testuser',
          created_at: new Date('2024-01-01T10:00:00.000Z'),
          updated_at: new Date(),
          is_admin: false,
          total_purchases: 5,
          total_regular_purchases: 3,
          total_free_purchases: 2
        }
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: ${user1.first_name} ${user1.last_name} (TG: ${user1.tg_id})`);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2: –ù–∏–∫–æ–ª–∞–π –®–∞–¥–æ–≤—Å–∫–∏–π
      const user2 = await prisma.user.create({
        data: {
          tg_id: BigInt(937011437),
          first_name: '–ù–∏–∫–æ–ª–∞–π',
          last_name: '–®–∞–¥–æ–≤—Å–∫–∏–π',
          phone: '+79270036642',
          username: 'shadowskydie',
          created_at: new Date('2024-06-06T16:33:45.601Z'),
          updated_at: new Date('2024-10-12T15:00:42.000Z'),
          is_admin: true,
          total_purchases: 11,
          total_regular_purchases: 9,
          total_free_purchases: 2
        }
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: ${user2.first_name} ${user2.last_name} (TG: ${user2.tg_id})`);

      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 (5 –∑–∞–ø–∏—Å–µ–π)
      const history1 = [
        { hookah_type: 'regular', created_at: new Date('2024-01-15T14:30:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-02-20T16:45:00.000Z') },
        { hookah_type: 'free', created_at: new Date('2024-03-10T13:15:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-04-05T18:20:00.000Z') },
        { hookah_type: 'free', created_at: new Date('2024-05-12T15:30:00.000Z') }
      ];

      for (const h of history1) {
        await prisma.hookahHistory.create({
          data: {
            user_id: user1.id,
            hookah_type: h.hookah_type,
            slot_number: null,
            created_at: h.created_at
          }
        });
      }
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1: ${history1.length} –∑–∞–ø–∏—Å–µ–π`);

      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 (11 –∑–∞–ø–∏—Å–µ–π)
      const history2 = [
        { hookah_type: 'regular', created_at: new Date('2024-06-06T16:33:45.601Z') },
        { hookah_type: 'regular', created_at: new Date('2024-06-15T14:20:00.000Z') },
        { hookah_type: 'free', created_at: new Date('2024-07-01T16:45:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-07-10T13:15:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-07-20T18:20:00.000Z') },
        { hookah_type: 'free', created_at: new Date('2024-08-05T15:30:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-08-15T17:45:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-09-01T14:30:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-09-15T16:15:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-10-01T13:45:00.000Z') },
        { hookah_type: 'regular', created_at: new Date('2024-10-12T15:00:42.000Z') }
      ];

      for (const h of history2) {
        await prisma.hookahHistory.create({
          data: {
            user_id: user2.id,
            hookah_type: h.hookah_type,
            slot_number: null,
            created_at: h.created_at
          }
        });
      }
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2: ${history2.length} –∑–∞–ø–∏—Å–µ–π`);

      // –°–æ–∑–¥–∞–µ–º –∞–∫—Ü–∏—é "5+1 –∫–∞–ª—å—è–Ω" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
      const stock = await prisma.stock.create({
        data: {
          user_id: user2.id,
          stock_name: '5+1 –∫–∞–ª—å—è–Ω',
          total_slots: 5,
          used_slots: 4,
          created_at: new Date('2024-06-06T16:33:45.601Z'),
          updated_at: new Date()
        }
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ü–∏—è: ${stock.stock_name} (${stock.used_slots}/${stock.total_slots})`);

      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ PostgreSQL');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalUsers = await prisma.user.findMany();
    const finalHistory = await prisma.hookahHistory.findMany();
    const finalStocks = await prisma.stock.findMany();

    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalUsers.length}`);
    console.log(`üìù –ò—Å—Ç–æ—Ä–∏—è: ${finalHistory.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üì¶ –ê–∫—Ü–∏–∏: ${finalStocks.length} –∑–∞–ø–∏—Å–µ–π`);

    finalUsers.forEach(user => {
      console.log(`  - ${user.first_name} ${user.last_name} (TG: ${user.tg_id}, –ü–æ–∫—É–ø–æ–∫: ${user.total_purchases})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateToProduction();
