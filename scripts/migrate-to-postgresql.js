const { PrismaClient } = require('@prisma/client');
const Database = require('better-sqlite3');

// –°–æ–∑–¥–∞–µ–º Prisma Client –¥–ª—è PostgreSQL
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sqliteDb = new Database('./prisma/hookah.db', { readonly: true });

async function migrateToPostgreSQL() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL...');
    await prisma.hookahReview.deleteMany();
    await prisma.hookahHistory.deleteMany();
    await prisma.freeHookahRequest.deleteMany();
    await prisma.freeHookah.deleteMany();
    await prisma.stock.deleteMany();
    await prisma.adminList.deleteMany();
    await prisma.admin.deleteMany();
    await prisma.user.deleteMany();
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    // 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = sqliteDb.prepare('SELECT * FROM users').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    for (const user of users) {
      await prisma.user.create({
        data: {
          tg_id: user.tg_id,
          first_name: user.first_name,
          last_name: user.last_name,
          phone: user.phone,
          username: user.username,
          created_at: new Date(user.created_at),
          updated_at: new Date(user.updated_at),
          is_admin: Boolean(user.is_admin),
          total_purchases: user.total_purchases || 0,
          total_regular_purchases: user.total_regular_purchases || 0,
          total_free_purchases: user.total_free_purchases || 0
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    // 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–ø–∞—Å—ã
    console.log('üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–ø–∞—Å—ã...');
    const stocks = sqliteDb.prepare('SELECT * FROM stocks').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∞—Å–æ–≤: ${stocks.length}`);
    
    for (const stock of stocks) {
      await prisma.stock.create({
        data: {
          user_id: stock.user_id,
          stock_name: stock.stock_name,
          progress: stock.progress,
          promotion_completed: Boolean(stock.promotion_completed),
          created_at: new Date(stock.created_at),
          updated_at: new Date(stock.updated_at)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∞—Å–æ–≤: ${stocks.length}`);
    
    // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å—è–Ω–æ–≤
    console.log('üìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª—å—è–Ω–æ–≤...');
    const history = sqliteDb.prepare('SELECT * FROM hookah_history').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${history.length}`);
    
    for (const record of history) {
      await prisma.hookahHistory.create({
        data: {
          user_id: record.user_id,
          hookah_type: record.hookah_type,
          slot_number: record.slot_number,
          created_at: record.created_at ? new Date(record.created_at) : null
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${history.length}`);
    
    // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
    console.log('‚≠ê –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã...');
    const reviews = sqliteDb.prepare('SELECT * FROM hookah_reviews').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviews.length}`);
    
    for (const review of reviews) {
      await prisma.hookahReview.create({
        data: {
          user_id: review.user_id,
          hookah_id: review.hookah_id,
          rating: review.rating,
          review_text: review.review_text,
          created_at: new Date(review.created_at)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviews.length}`);
    
    // 5. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    console.log('üëë –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
    const adminList = sqliteDb.prepare('SELECT * FROM admin_list').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminList.length}`);
    
    for (const admin of adminList) {
      await prisma.adminList.create({
        data: {
          tg_id: admin.tg_id,
          created_at: new Date(admin.created_at)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminList.length}`);
    
    // 6. –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã
    console.log('üéÅ –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã...');
    const freeHookahs = sqliteDb.prepare('SELECT * FROM free_hookahs').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤: ${freeHookahs.length}`);
    
    for (const hookah of freeHookahs) {
      await prisma.freeHookah.create({
        data: {
          user_id: hookah.user_id,
          used: Boolean(hookah.used),
          used_at: hookah.used_at ? new Date(hookah.used_at) : null,
          created_at: new Date(hookah.created_at)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤: ${freeHookahs.length}`);
    
    // 7. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã
    console.log('üìã –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã...');
    const requests = sqliteDb.prepare('SELECT * FROM free_hookah_requests').all();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requests.length}`);
    
    for (const request of requests) {
      await prisma.freeHookahRequest.create({
        data: {
          user_id: request.user_id,
          stock_id: request.stock_id,
          status: request.status,
          approved_by: request.approved_by,
          created_at: new Date(request.created_at),
          updated_at: new Date(request.updated_at)
        }
      });
    }
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requests.length}`);
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
    sqliteDb.close();
  }
}

migrateToPostgreSQL();
