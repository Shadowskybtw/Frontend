#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∫—É–ø–æ–∫
 */

const sqlite3 = require('sqlite3').verbose();
const { neon } = require('@neondatabase/serverless');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const OLD_DB_PATH = process.argv[3] || 'hookah.db';
const TARGET_DATABASE_URL = process.env.TARGET_DATABASE_URL;

if (!TARGET_DATABASE_URL) {
  console.error('‚ùå TARGET_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

const targetDb = neon(TARGET_DATABASE_URL);

class TotalPurchasesUpdater {
  constructor() {
    this.oldDb = null;
    this.targetDb = targetDb;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async connectToOldDb() {
    return new Promise((resolve, reject) => {
      this.oldDb = new sqlite3.Database(OLD_DB_PATH, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
          reject(err);
        } else {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
          resolve();
        }
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkTargetConnection() {
    try {
      await this.targetDb`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
   */
  async getPurchasesData() {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const purchases = await this.getAllPurchases();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${purchases.length}`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const purchasesByUser = {};
      purchases.forEach(purchase => {
        const tgId = purchase.tg_id;
        if (!purchasesByUser[tgId]) {
          purchasesByUser[tgId] = {
            tg_id: tgId,
            first_name: purchase.first_name,
            last_name: purchase.last_name,
            total_purchases: 0,
            total_regular_purchases: 0,
            total_free_purchases: 0
          };
        }
        
        purchasesByUser[tgId].total_purchases++;
        
        if (purchase.is_free === 1) {
          purchasesByUser[tgId].total_free_purchases++;
        } else {
          purchasesByUser[tgId].total_regular_purchases++;
        }
      });

      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${Object.keys(purchasesByUser).length}`);
      return purchasesByUser;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
   */
  async getAllPurchases() {
    return new Promise((resolve, reject) => {
      this.oldDb.all(`
        SELECT 
          g.telegram_id as tg_id,
          g.first_name,
          g.last_name,
          p.is_free,
          p.created_at
        FROM purchases p
        JOIN guests g ON p.guest_id = g.id
        ORDER BY p.created_at ASC
      `, (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows);
        }
      });
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
   */
  async updateUsersData(purchasesByUser) {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

      let updatedUsers = 0;
      let notFoundUsers = 0;
      let errors = 0;

      for (const [tgId, userData] of Object.entries(purchasesByUser)) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ
          const existingUser = await this.targetDb`
            SELECT id, first_name, last_name FROM users WHERE tg_id = ${parseInt(tgId)}
          `;

          if (existingUser.length === 0) {
            console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.first_name} ${userData.last_name} (TG: ${tgId}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ`);
            notFoundUsers++;
            continue;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await this.targetDb`
            UPDATE users 
            SET 
              total_purchases = ${userData.total_purchases},
              total_regular_purchases = ${userData.total_regular_purchases},
              total_free_purchases = ${userData.total_free_purchases},
              updated_at = NOW()
            WHERE tg_id = ${parseInt(tgId)}
          `;

          console.log(`‚úÖ ${userData.first_name} ${userData.last_name} (TG: ${tgId}):`);
          console.log(`   –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: ${userData.total_purchases}`);
          console.log(`   –û–±—ã—á–Ω—ã—Ö: ${userData.total_regular_purchases}, –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${userData.total_free_purchases}`);
          console.log('');

          updatedUsers++;

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tgId}:`, error.message);
          errors++;
        }
      }

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedUsers}`);
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFoundUsers}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);

      return { updatedUsers, notFoundUsers, errors };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async showUpdatedStatistics() {
    try {
      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');

      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalStats = await this.targetDb`
        SELECT 
          COUNT(*) as total_users,
          SUM(total_purchases) as total_purchases,
          SUM(total_regular_purchases) as total_regular_purchases,
          SUM(total_free_purchases) as total_free_purchases
        FROM users
      `;

      const stats = totalStats[0];
      console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`);
      console.log(`   –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: ${stats.total_purchases || 0}`);
      console.log(`   –û–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${stats.total_regular_purchases || 0}`);
      console.log(`   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${stats.total_free_purchases || 0}`);

      // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫
      const topUsers = await this.targetDb`
        SELECT 
          first_name, last_name, tg_id,
          total_purchases, total_regular_purchases, total_free_purchases
        FROM users 
        WHERE total_purchases > 0
        ORDER BY total_purchases DESC 
        LIMIT 10
      `;

      console.log(`\nüèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫:`);
      topUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.first_name} ${user.last_name} (TG: ${user.tg_id})`);
        console.log(`      –í—Å–µ–≥–æ: ${user.total_purchases}, –û–±—ã—á–Ω—ã—Ö: ${user.total_regular_purchases}, –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: ${user.total_free_purchases}`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  closeConnection() {
    if (this.oldDb) {
      this.oldDb.close((err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message);
        } else {
          console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
      });
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const updater = new TotalPurchasesUpdater();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const targetConnected = await updater.checkTargetConnection();
    if (!targetConnected) {
      process.exit(1);
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await updater.connectToOldDb();

    switch (command) {
      case 'update':
        const purchasesData = await updater.getPurchasesData();
        const results = await updater.updateUsersData(purchasesData);
        await updater.showUpdatedStatistics();
        break;
        
      case 'stats':
        await updater.showUpdatedStatistics();
        break;
        
      case 'help':
      default:
        console.log(`
üìä –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∫—É–ø–æ–∫

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node update-users-total-purchases.js <command> [old_db_path]

–ö–æ–º–∞–Ω–¥—ã:
  update          - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  stats           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TARGET_DATABASE_URL  - URL —Ü–µ–ª–µ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

–ü—Ä–∏–º–µ—Ä—ã:
  # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  TARGET_DATABASE_URL="–≤–∞—à_url" node update-users-total-purchases.js update
  
  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  TARGET_DATABASE_URL="–≤–∞—à_url" node update-users-total-purchases.js stats

–õ–æ–≥–∏–∫–∞:
  - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É purchases –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  - –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  - –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è total_purchases, total_regular_purchases, total_free_purchases
  - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        `);
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    updater.closeConnection();
  }
}

if (require.main === module) {
  main();
}

module.exports = TotalPurchasesUpdater;
