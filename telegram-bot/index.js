#!/usr/bin/env node
/**
 * Telegram Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–ª—å—è–Ω–æ–≤
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
 */

const { Telegraf } = require('telegraf');
const { neon } = require('@neondatabase/serverless');
const cron = require('node-cron');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const NOTIFICATION_TIME = process.env.NOTIFICATION_TIME || '18:00';
const TIMEZONE = process.env.TIMEZONE || 'Europe/Moscow';

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const bot = new Telegraf(BOT_TOKEN);
const db = neon(DATABASE_URL);

class HookahNotificationBot {
  constructor() {
    this.bot = bot;
    this.db = db;
    this.notificationTime = NOTIFICATION_TIME;
    this.timezone = TIMEZONE;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkDatabaseConnection() {
    try {
      await this.db`SELECT 1`;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async getUsersForNotifications() {
    try {
      const users = await this.db`
        SELECT 
          u.id,
          u.tg_id,
          u.first_name,
          u.last_name,
          u.phone,
          s.progress,
          COUNT(fh.id) as total_hookahs,
          COUNT(CASE WHEN fh.used = true THEN 1 END) as used_hookahs,
          COALESCE(u.total_purchases, 0) as total_purchases,
          COALESCE(u.total_regular_purchases, 0) as total_regular_purchases,
          COALESCE(u.total_free_purchases, 0) as total_free_purchases
        FROM users u
        LEFT JOIN stocks s ON u.id = s.user_id
        LEFT JOIN free_hookahs fh ON u.id = fh.user_id
        WHERE u.tg_id IS NOT NULL 
          AND u.tg_id > 0
          AND s.progress IS NOT NULL
        GROUP BY u.id, u.tg_id, u.first_name, u.last_name, u.phone, s.progress, u.total_purchases, u.total_regular_purchases, u.total_free_purchases
        HAVING COUNT(fh.id) > 0
        ORDER BY s.progress DESC
      `;

      return users;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return [];
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª—å—è–Ω–æ–≤ –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
   */
  calculateHookahsToFree(progress) {
    if (progress >= 100) {
      return 0; // –ì–æ—Ç–æ–≤ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É
    }
    
    // –ö–∞–∂–¥—ã–π –∫–∞–ª—å—è–Ω = 20%, —Ç–∞–∫ –∫–∞–∫ 5 –∫–∞–ª—å—è–Ω–æ–≤ = 100%
    const hookahsInCurrentCycle = Math.floor(progress / 20);
    const hookahsToFree = 5 - hookahsInCurrentCycle;
    
    return Math.max(0, hookahsToFree);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  createNotificationMessage(user) {
    const hookahsToFree = this.calculateHookahsToFree(user.progress);

    let message = `üéØ <b>DUNGEONHOOKAH_BOT</b>\n\n`;
    message += `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã\n\n`;
    
    if (hookahsToFree === 0) {
      message += `üéâ <b>–£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω!</b>\n\n`;
      message += `–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ —Å–∫–æ—Ä–µ–µ! üöÄ`;
    } else {
      message += `üéØ <b>–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${hookahsToFree} –∫–∞–ª—å—è–Ω–æ–≤</b>`;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è webapp
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: 'https://frontend-delta-sandy-58.vercel.app' }
        }
      ]]
    };

    return { message, keyboard };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   */
  createProgressBar(progress) {
    const filled = Math.floor(progress / 10);
    const empty = 10 - filled;
    
    let bar = '';
    for (let i = 0; i < filled; i++) {
      bar += 'üü©';
    }
    for (let i = 0; i < empty; i++) {
      bar += '‚¨ú';
    }
    
    return bar;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotificationToUser(user) {
    try {
      const { message, keyboard } = this.createNotificationMessage(user);
      
      await this.bot.telegram.sendMessage(user.tg_id, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        reply_markup: keyboard
      });
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${user.first_name} ${user.last_name} (TG: ${user.tg_id})`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.tg_id}:`, error.message);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendDailyNotifications() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    const users = await this.getUsersForNotifications();
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const user of users) {
      const success = await this.sendNotificationToUser(user);
      if (success) {
        successCount++;
      } else {
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  setupBotCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start((ctx) => {
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: 'https://frontend-delta-sandy-58.vercel.app' }
          }
        ]]
      };

      ctx.reply(
        'üéØ <b>DUNGEONHOOKAH_BOT</b>\n\n' +
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –∞–∫—Ü–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤.\n\n' +
        'üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
        '/progress - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n' +
        '/help - –ø–æ–º–æ—â—å\n\n' +
        'üí° <b>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!</b>',
        { 
          parse_mode: 'HTML',
          reply_markup: keyboard
        }
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /progress
    this.bot.command('progress', async (ctx) => {
      try {
        const tgId = ctx.from.id;
        
        const user = await this.db`
          SELECT 
            u.id,
            u.tg_id,
            u.first_name,
            u.last_name,
            u.phone,
            s.progress,
            COUNT(fh.id) as total_hookahs,
            COUNT(CASE WHEN fh.used = true THEN 1 END) as used_hookahs
          FROM users u
          LEFT JOIN stocks s ON u.id = s.user_id
          LEFT JOIN free_hookahs fh ON u.id = fh.user_id
          WHERE u.tg_id = ${tgId}
          GROUP BY u.id, u.tg_id, u.first_name, u.last_name, u.phone, s.progress
        `;

        if (user.length === 0) {
          ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }

        const userData = user[0];
        const { message, keyboard } = this.createNotificationMessage(userData);
        
        ctx.reply(message, { 
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help((ctx) => {
      ctx.reply(
        'üÜò <b>–ü–æ–º–æ—â—å</b>\n\n' +
        'üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n' +
        '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
        '/progress - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∞–∫—Ü–∏–∏\n' +
        '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '‚è∞ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n' +
        '–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 18:00 –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –∞–∫—Ü–∏–∏ –∫–∞–ª—å—è–Ω–æ–≤.\n\n' +
        'üéØ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–∫—Ü–∏—è:</b>\n' +
        '‚Ä¢ –ö–∞–∂–¥—ã–µ 5 –ø–æ–∫—É–ø–æ–∫ = 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω\n' +
        '‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è\n' +
        '‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!',
        { parse_mode: 'HTML' }
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.bot.on('text', (ctx) => {
      ctx.reply(
        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.',
        { parse_mode: 'HTML' }
      );
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  setupNotificationSchedule() {
    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const [hours, minutes] = this.notificationTime.split(':').map(Number);
    
    // –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const cronExpression = `${minutes} ${hours} * * *`;
    
    console.log(`‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${this.notificationTime} (${this.timezone})`);
    console.log(`üìÖ Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ${cronExpression}`);
    
    cron.schedule(cronExpression, async () => {
      console.log('üïï –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!');
      await this.sendDailyNotifications();
    }, {
      timezone: this.timezone
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const dbConnected = await this.checkDatabaseConnection();
      if (!dbConnected) {
        process.exit(1);
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      this.setupBotCommands();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.setupNotificationSchedule();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      await this.bot.launch();
      console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      process.once('SIGINT', () => this.bot.stop('SIGINT'));
      process.once('SIGTERM', () => this.bot.stop('SIGTERM'));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error.message);
      process.exit(1);
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async testNotifications() {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    await this.sendDailyNotifications();
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const bot = new HookahNotificationBot();

  switch (command) {
    case 'test':
      await bot.testNotifications();
      break;
    case 'start':
    default:
      await bot.start();
      break;
  }
}

if (require.main === module) {
  main();
}

module.exports = HookahNotificationBot;
