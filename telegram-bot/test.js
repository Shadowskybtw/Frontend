#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
 */

const { neon } = require('@neondatabase/serverless');
require('dotenv').config();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
if (!process.env.BOT_TOKEN) {
  process.env.BOT_TOKEN = 'test_token_for_testing';
}

const HookahNotificationBot = require('./index.js');

async function testBot() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–∞–ª—å—è–Ω–ë–æ—Ç–∞ Dungeon...\n');
  
  const bot = new HookahNotificationBot();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const dbConnected = await bot.checkDatabaseConnection();
    if (!dbConnected) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const users = await bot.getUsersForNotifications();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const stats = {
      total: users.length,
      readyForFree: users.filter(u => u.progress >= 100).length,
      inProgress: users.filter(u => u.progress > 0 && u.progress < 100).length,
      zeroProgress: users.filter(u => u.progress === 0).length
    };
    
    console.log(`   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}`);
    console.log(`   üéâ –ì–æ—Ç–æ–≤—ã –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É: ${stats.readyForFree}`);
    console.log(`   üìà –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.inProgress}`);
    console.log(`   ‚ö™ –ù—É–ª–µ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${stats.zeroProgress}\n`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('4Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤—ã–π –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É
    const readyUser = users.find(u => u.progress >= 100);
    if (readyUser) {
      console.log('\nüì± –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É:');
      console.log('‚îÄ'.repeat(50));
      console.log(bot.createNotificationMessage(readyUser));
      console.log('‚îÄ'.repeat(50));
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    const progressUser = users.find(u => u.progress > 0 && u.progress < 100);
    if (progressUser) {
      console.log('\nüì± –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:');
      console.log('‚îÄ'.repeat(50));
      console.log(bot.createNotificationMessage(progressUser));
      console.log('‚îÄ'.repeat(50));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5Ô∏è‚É£ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É:');
    const topUsers = users
      .sort((a, b) => b.progress - a.progress)
      .slice(0, 10);
    
    topUsers.forEach((user, index) => {
      const hookahsToFree = bot.calculateHookahsToFree(user.progress);
      console.log(`   ${index + 1}. ${user.first_name} ${user.last_name} - ${user.progress}% (–¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ: ${hookahsToFree})`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node index.js start');
    console.log('üß™ –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: node index.js test');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  testBot();
}

module.exports = testBot;
